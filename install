#!/usr/bin/env perl 

#TODO
# iptables


# $Header: /tmp/netpass/NetPass/install,v 1.28 2005/12/22 19:29:52 jeffmurphy Exp $

#   (c) 2004 University at Buffalo.
#   Available under the "Artistic License"
#   http://www.gnu.org/licenses/license-list.html#ArtisticLicense

=head1 NAME

install - installation / upgrade script

=head1 SYNOPSIS

 install.pl [-ucD] [--exclude pattern] [/dest/dir]
     -u             uninstall
     -s             stage #
     -D             enable debugging
     -c             copy only 
     --exclude pat  when copying, exclude matching files

=head1 OPTIONS

=over 8

=item B<-s #>

Start installation at given stage number. Not implemented.

=item B<-u>

Uninstall

=item B<-D> 

Enable debugging output.

=item B<-c> 

Copy only. This means "just copy the source tree into the destination directory
and stop, don't download, install or configure anything else".

=item B<--exclude pat>

When copying the source tree, exclude matching files.

=back

=head1 DESCRIPTION

This script will install NetPass into the given directory or upgrade a
NetPass distribution that is already in that directory.

=head1 AUTHOR

Jeff Murphy <jcmurphy@buffalo.edu>

=head1 LICENSE

   (c) 2004 University at Buffalo.
   Available under the "Artistic License"
   http://www.gnu.org/licenses/license-list.html#ArtisticLicense

=head1 REVISION

$Id: install,v 1.28 2005/12/22 19:29:52 jeffmurphy Exp $

=cut

use strict;
use FileHandle;
use Getopt::Long;
use Carp;
use Pod::Usage;

BEGIN {
	delete $ENV{'DISPLAY'};
}


my $STAGE     = 0;
my $copyOnly  = 0;
my $D         = 0;
my $uninstall = 0;
my $help      = 0;
my @exclude   = ();
my $R         = {}; # global registry

GetOptions ("s=i" => \$STAGE,
	    "c"   => \$copyOnly,
	    "D"   => \$D,
	    "u"   => \$uninstall,
	    "h"   => \$help,
	    "exclude=s" => \@exclude) or pod2usage(2);

pod2usage(1) if $help;


my $PKGDIR = $0;
$PKGDIR =~ s/\/[^\/]+$//;
my $cwd = cwd(); 
$PKGDIR = $cwd if ($PKGDIR  =~ /^\.{0,1}$/);
chdir $PKGDIR;

my $LOG = new FileHandle "/tmp/netpass-install.log", "w";
if (!defined($LOG)) {
	print "Failed to open /tmp/netpass-install.log for writing.\n";
	exit 255;
}
print "Installation will be logged to /tmp/netpass-install.log\n\n";


checkKit($PKGDIR);
my $VERSION = getVersion($PKGDIR);

welcome($VERSION);

my $TARGET = shift;

my $un = "install into:";
   $un = "uninstall from: " if $uninstall;

if (!defined($TARGET)) {
	print "Directory to $un ";
	$TARGET=<STDIN>;
	chomp($TARGET);
}

my $ARCHBASE = "http://foobar.cit.buffalo.edu/netpass/ttt/";
my $HTMLAREA = "HTMLArea-3.0-rc1";
my $APACHE   = "apache-1.3.33.tar.bz2";
my $PERL     = "perl-5.8.6.tar.bz2";
my $SQUIDG   = "sg.tar.bz2";

if ($uninstall) {
	lprint("Uninstalling NetPass ..\n");

	foreach my $etcf ('services', 'syslog.conf') {
		depatchConf("/etc", $etcf);
	}
	lsystem("/etc/init.d/syslog restart");

	depatchConf("/etc", "inittab");
	lsystem("/sbin/init q");

	lsystem("/etc/init.d/netpass stop");

	lsystem("/etc/init.d/syslog restart");
	lsystem("/etc/init.d/syslog restart");
	depatchConf("/etc/squid", "squid.conf");

	removeTree($TARGET);
	lsystem("crontab -u netpass -r");
	lsystem("/usr/sbin/userdel netpass") && lprint("userdel netpass failed $!\n");
	lsystem("/usr/sbin/groupdel netpass") && lprint("groupdel netpass failed $!\n");
	lsystem("rm /opt/apache /opt/perl");

	lsystem("rm -f /etc/logrotate.d/netpass");
	if (-d "/opt/apache_1.3.33") {
		lsystem("rm -f /etc/logrotate.d/apache");
	}
	foreach my $d ("/opt/apache_1.3.33", "/opt/perl-5.8.6", "/opt/squidguard") {
		next unless (-d $d);
		my $a = ask ("Remove directory $d and it's contents? [Y/N] ");
		if ($a =~ /^y/i) {
			lsystem("rm -fr $d");
		}
	}

	lprint("Removing /cookies from /etc/fstab\n");

	lsystem("/bin/umount -d /cookies");
	lsystem("rmdir /cookies") if (-d "/cookies");
	lsystem("rm -f /var/cookies") if (-f "/var/cookies");
	lsystem("rpm -e reiserfsprogs");
	lsystem("rm -fr /var/run/netpass") if (-d "/var/run/netpass" && ! -l "/var/run/netpass");
	lsystem("rm /etc/iptables.sh");

	uninstallSwatch();
	depatchConf("/etc", "fstab");
	dropDatabase();

	uninstallStartupScripts($PKGDIR."/install.d/init.d");

	lprint ("NetPass uninstall finished.\n");
	exit 0;
}

my $UPGRADE = 0;
$UPGRADE = 1 if( -d $TARGET );

my $CURVERSION = getVersion($TARGET) if $UPGRADE;

#print "KITVER=$VERSION CURVER=$CURVERSION\n";

ll("Configuring $TARGET/log directory ..\n");

mkdir $TARGET unless $UPGRADE;
mkdir "$TARGET/log" || die "cant mkdir $TARGET/log $!";
touch("$TARGET/log/netpass.log");
touch("$TARGET/log/snmptraps.log");

copyTree($PKGDIR, $TARGET, $copyOnly, \@exclude);
print "\n";

sub lprint;

if ($copyOnly) {
	lprint "copyOnly specified. copy finished.\n";
	lsystem ("/bin/chown -R netpass:netpass $TARGET");
	exit 0;
}

installPackages($PKGDIR);


lsystem ("/usr/sbin/groupadd netpass");
lsystem ("/usr/sbin/useradd -d '$TARGET' -g netpass -s /bin/false netpass");

mkdir "/var/run/netpass" unless (-d "/var/run/netpass");
lsystem("chown -R netpass:netpass /var/run/netpass");

installHTMLArea($PKGDIR, $TARGET) unless $UPGRADE;
installPrebuilt("http://foobar.cit.buffalo.edu/netpass/ttt", $SQUIDG, "/opt");
installPrebuilt("http://foobar.cit.buffalo.edu/netpass/ttt", $PERL, "/opt");
my $APACHE_PB_INSTALLED = 
  installPrebuilt("http://foobar.cit.buffalo.edu/netpass/ttt", $APACHE, "/opt");

lsystem (qq{ln -s /opt/apache_1.3.33 /opt/apache}) if $APACHE_PB_INSTALLED 
  && (! -l "/opt/apache");
lsystem (qq{ln -s /opt/perl-5.8.6    /opt/perl}) if (! -l "/opt/perl");

makeCookiesDir();
my $apacheRV = apacheConfig($PKGDIR."/install.d/httpd.conf",
			    "/opt/apache/conf/httpd.conf") if $APACHE_PB_INSTALLED;

my $swatchRV = installSwatch($PKGDIR."/install.d/swatch.conf", "/etc/swatch.conf");

if ((!-d "$TARGET/www/htdocs/resources") && (!-l "$TARGET/www/htdocs/resources")) {
	lsystem (qq{ln -s "$TARGET/www/htdocs/OSSTemplate" "$TARGET/www/htdocs/resources"});
}

if ((!-f "$TARGET/www/htdocs/index.mhtml") && (!-l "$TARGET/www/htdocs/index.mhtml")) {
	lsystem (qq{ln -s "$TARGET/www/htdocs/netpass.mhtml" "$TARGET/www/htdocs/index.mhtml"});
}

foreach my $etcf ('services', 'syslog.conf') {
	lprint ("Updating $etcf ..\n");
	patchConf("/etc", $etcf);
}
lsystem("/etc/init.d/syslog restart");

my $smtp_server = ask("Some of the NetPass subsystems send problem alerts via email.\n\
Enter an SMTP server here: ");

patchConf("/etc", "inittab", { '%SMTPHOST%' => $smtp_server });
configureNPSVC($PKGDIR."/etc/npsvc-example.conf", $TARGET."/etc/npsvc.conf");

my $squidRV = patchSquidConf($PKGDIR, "install.d/squid.conf");

installIPTables ($PKGDIR."/install.d", "iptables.sh", $squidRV->{'netblocks'});

loadTables($PKGDIR, "install.d/tables.sql");
installCrontab($PKGDIR, "install.d/crontab.netpass");
installStartupScripts($PKGDIR."/install.d/init.d", 
		      { 'swatch' => $swatchRV,  
			'apache' => $apacheRV
		      });

lsystem ("/bin/chown -R netpass:netpass $TARGET");

startupProcs();

lprint("Installation finished. Connect to this host with a web browser to
configure netpass. Login as netpass/netpass. Be sure to change your 
authentication method and/or reset the password as soon as you login.\n");

lsystem("/sbin/init q");

$LOG->close;

exit 0;

sub ll {
	print $LOG @_;
}

sub ldie {
	print $LOG @_;
	print "A fatal error has occurred. Check the log file for details.\n";
	die @_;
}

sub lwarn {
	print $LOG "WARNING: ".@_."\n";
}

sub lprint {
	print $LOG @_;
	print @_;
}

sub lsystem {
	open (O_STDOUT, ">&STDOUT") ||
                die "cant dup STDOUT: $!";
        open (O_STDERR, ">&STDERR") ||
                die "cant dup STDERR: $!";
        # suppress warnings
        my $junk = stat(O_STDOUT);
           $junk = stat(O_STDERR);
        open (STDERR, ">>&=", $LOG) ||
                die "cant redirect STDERR to LOG: $!";
        open (STDOUT, ">>&=", $LOG) ||
                die "cant redirect STDOUT to LOG: $!";
        select (STDERR);
        $| = 1;
        select(STDOUT);
        $| = 1;

	print $LOG "START SHELL: ".join(' ', @_) ."\n";

	my $rv =  system(@_);

        print $LOG "END SHELL\n";

	open (STDOUT, ">&O_STDOUT") ||
                die "cant dup STDOUT back: $!";
        open (STDERR, ">&O_STDERR") ||
                die "cant dup STDERR back: $!";
        select (STDERR); $| = 1;
        select (STDOUT); $| = 1;
        return $rv;

}

sub startupProcs {
	lsystem("/etc/init.d/apache start");
	lsystem("/etc/init.d/squid start");
	lsystem("/etc/init.d/swatch start");
	lsystem("/etc/init.d/netpass start");
}

sub installIPTables {
	my ($base, $cfg, $netblocks) = (shift, shift, shift);
	if (! -f "$base/$cfg" ) {
		lprint "$base/$cfg doesnt exist.\n";
		return;
	}
	$netblocks = "" if (!defined($netblocks));

	lprint "copy $base/$cfg to /etc/$cfg, using netblocks=$netblocks\n";

	if (-f "/etc/$cfg") {
		lprint "hmm. /etc/$cfg already exists. We wont over-write it. We're going to skip\nthis section of the install.\n";
		return;
	}

	my $mgmt = ask("Enter netblocks (or IP addresses) from which you'll manage this
NetPass server. We'll allow SNMP, SSH and NTP from those networks. This should 
include your switches, which will be sending SNMP traps. Enter the netblock(s) all on 
one line, separated with spaces:

");

	my $trappers = ask("Enter netblocks (or IP addresses) from which this server will
receive traps. These are your switches. We need to see linkup/linkdown traps from them
for some NetPass functionality to work properly. Enter the netblock(s) all on 
one line, separated with spaces:

");

	my $npserv = ask("Enter the IP addresses of all of your NetPass servers (a netblock is OK).
We'll use this to permit MySQL traffic between those servers. Without this, MySQL cluster
will not function. Enter the addresses on a single line, separated by spaces:

");

	my $apicli = ask("Enter the IP addresses of all of your NetPass API Clients (a netblock is OK).
We'll use this to permit API traffic from those clients. Enter the addresses on a single line,
separated by spaces:

");

	my $npvip = '';
	my $redir1 = ''; 
	my $redir2 = '';

	my $useha = ask("Will you be using HA? [y/N] ");
	if ($useha =~ /^y/i) {
		$npvip  = ask("Enter the virtual IP address for this NetPass cluster: ");
		$redir1 = ask("Enter the DNS name (or IP address) for the primary redirector: ");
		$redir2 = ask("Enter the DNS name (or IP address) for the secondary redirector (hit enter if you only have one redirector): ");
		$R->{'npvip'}  = $npvip;
		$R->{'redir1'} = $redir1;
		$R->{'redir2'} = $redir2;
	}

	my $myip = getMyIP("eth0");

	if (!defined($myip)) {
		my $ok = 0;
		while(!$ok) {
			$myip = ask("I couldn't figure out the IP address of this server (eth0). What
is it? ");
			if ($myip =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/) {
				$ok = 1;
			} else {
				lprint "That doesn't look like an IP address. Try again.\n\n";
			}
		}
	}

	my $fi = new FileHandle "$base/$cfg", "r";
	ldie "cant open $base/$cfg for reading: $!" unless defined $fi;
	my $fo = new FileHandle "/etc/$cfg", "w";
	ldie "cant open /etc/$cfg for writing: $!" unless defined $fo;

	while(my $l = <$fi>) {
		if($netblocks ne "") {
			$l =~ s/%NETBLOCK%/$netblocks/g;
			$l =~ s/^#NB//;
		}
		if ($mgmt ne "") {
			$l =~ s/%MGTDEVS%/$mgmt/g;
			$l =~ s/^#MGT//;
		}
		if ($npserv ne "") {
			$l =~ s/%NETPASSSERVERS%/$npserv/g;
			$l =~ s/^#NPS//;
		}
		if ($npvip ne "") {
			$l =~ s/%NPVIP%/$npvip/g;
			$l =~ s/^#NPVIP//;
		}
		if ($trappers ne "") {
			$l =~ s/%TRAPDEVS%/$trappers/g;
			$l =~ s/^#TRAP//;
		}
		if ($apicli ne "") {
			$l =~ s/%APICLIENTS%/$apicli/g;
			$l =~ s/^#API//;
		}
		$l =~ s/%MYIP%/$myip/g;
			
		print $fo $l;
	}
	$fi->close;
	$fo->close;

	lsystem("chmod 755 /etc/iptables.sh");
	lsystem("/etc/iptables.sh");
	lsystem("/etc/init.d/iptables save");
}

sub getMyIP {
	my $d = shift;

	open(FH, "/sbin/ip addr show dev $d |") || 
	  ldie "failed to open /sbin/ip for piperead: $!";
	while(my $l = <FH>) {
		if ($l =~ /inet\s+([\d\.]+)\/.*$d$/) {
			return $1;
		}
	}
	close(FH);
	return undef;
}

sub installSwatch {
	my $cf = shift;
	my $sf = shift;

	lprint ("installSwatch: $cf doesnt exist\n") 
	  unless (-f $cf);

	print "\nWe use 'swatch' to watch some logfiles.\n";
	my $em = ask ("Enter an email address that swatch can mail if it spots something wrong: ");
	my $fh = new FileHandle $cf, "r";
	ldie "failed to open $cf for reading: $!" unless defined $cf;
	my $f2 = new FileHandle "/etc/swatch.conf", "w";
	ldie "failed to open $sf for writing: $!" unless defined $sf;
	while(my $line = <$fh>) {
		$line =~ s/%ADMINEMAIL%/$em/g;
		print $f2 $line;
	}
	$fh->close;
	$f2->close;
	lprint "Swatch configuration file installed to $sf\n";
	
	# there's no RPM needed. swatch is included with the perl pre-build

	if (! -f "/opt/perl/bin/swatch") {
		lprint "Warning: /opt/perl/bin/swatch not found. Did you use the pre-built perl?\n";
		return 0;
	}
	return 1;
}

sub uninstallSwatch {
	if (-f "/etc/init.d/swatch") {
		lprint "Uninstalling Swatch ..\n";
		lsystem("chkconfig --level 2345 swatch off");
		lsystem("rm -f /etc/swatch.conf");
		lsystem("rm -f /etc/init.d/swatch");
	}
}


sub installStartupScripts {
	my $ssdir = shift;
	my $skip  = shift;
	$skip = {} if (!defined($skip) || (ref($skip) ne "HASH"));

	installApacheStartupScript($ssdir, "apache", $skip->{'apache'});

	foreach my $script ("nessusd", "netpass", "swatch", "netpassha") {
		next if exists $skip->{$script} && $skip->{$script};
		lsystem("/bin/cp $ssdir/$script /etc/init.d/")
		  unless (-f "/etc/init.d/$script");
		lsystem("chkconfig --level 2345 $script on")
		  unless ($script eq "netpassha"); # manually do this
	}

	# squid init script installed via RPM

	lsystem ("chkconfig --level 2345 squid on");
	lsystem ("chkconfig --level 2345 dhcrelay on");
	lsystem ("chkconfig --level 2345 snmptrapd on");
	lsystem ("chkconfig --level 2345 apache on");
}

sub uninstallStartupScripts {
	my $ssdir = shift;
	my $skip  = shift;
	$skip = {} if (!defined($skip) || (ref($skip) ne "HASH"));

	lsystem ("chkconfig --level 2345 squid off");
	lsystem ("chkconfig --level 2345 dhcrelay off");
	lsystem ("chkconfig --level 2345 snmptrapd off");
	lsystem ("chkconfig --level 2345 apache off");

	foreach my $script ("nessusd", "netpass", "swatch", "netpassha") {
		next if exists $skip->{$script} && $skip->{$script};
		lsystem("chkconfig --level 2345 $script off");
		lsystem("chkconfig --del $script");
		lsystem("/bin/rm -f /etc/init.d/$script");
	}
}

sub installApacheStartupScript {
	my $base = shift; 
	my $scr  = shift;
	my $ssl  = shift;

	$ssl->{'ssl'} = 0 if (!defined($ssl) || (ref($ssl) ne "HASH"));

	my $fi = new FileHandle "$base/$scr", "r";
	ldie "failed to open $base/$scr for reading: $!" unless defined $fi;

	my $fo = new FileHandle "/etc/init.d/$scr", "w";
	ldie "failed to open /etc/init.d/$scr for writing: $!" unless defined $fo;

	while(my $l = <$fi>) {
		if ($ssl->{'ssl'} == 1) {
			$l =~ s/%DSSL%/-DSSL/g;
			print $fo $l;
		} else {
			$l =~ s/%DSSL%//g;
			print $fo $l;
		}
	}
	$fo->close;
	$fi->close;
}

sub installPackages {
	my $b = shift;
	my $fh = new FileHandle $b."/install.d/packages", "r";
	if ($fh) {
		my $pkgs = "";
		lprint "Installing requisite packages:\n";
		while(my $pn = <$fh>) {
			chomp($pn);
			next if ($pn =~ /^#/);
			lprint "\t$pn\n";
			$pkgs .= "$pn ";
		}
		if (-f '/usr/bin/yum') {
			lsystem ("yum -y install $pkgs");
		} 
		elsif (-f '/usr/bin/up2date') {
			lsystem ("up2date --nox -i $pkgs");
		} else {
			lprint "FAILED: Not sure how to install packages on this system!\n";
		}
	}
}

sub backupFile {
	my $f = shift;
	return unless -f $f;
	lsystem("cp '$f' '$f.backupByNetPass'");
}

sub patchSquidConf {
	my ($b, $f) = (shift, shift);
	return unless (-f "$b/$f");

	my $sc = "/etc/squid/squid.conf";
	$sc = askUnlessExists($sc);


	# open squid.conf and read it in

	my $fh = new FileHandle $sc, "r";
	if (!defined($fh)) {
		print "Failed to open $sc $!\n";
		return;
	}

	my @squidconf = <$fh>;
	$fh->close;

	# determine if the patch has already been applied

	if (grep (/BEGIN-NETPASS/, @squidconf)) {
		print "patch $b/$f already applied to $sc\n";
		return;
	}

	my $netblocks = ask("\n\n".
			    "We're going to configure Squid now. We'll adjust things so that\n".
			    "only your netblocks have access to Squid. To do that you need to tell\n".
			    "us what netblocks you'd like to permit. Enter them on a single line,\n".
			    "separated by spaces like this: 128.205.1.0/24 128.205.2.0/24\n".
			    "Press ENTER at the end of the line to continue.\n\n");
	
	print "Modifying $sc .. \n";

	# read in the patch

	$fh = new FileHandle "$b/$f", "r";
	if (!defined($fh)) {
		print "Failed to open $b/$f $!\n";
		return;
	}

	my @patch = <$fh>;
	$fh->close;

	# insert netblocks...

	for(my $ln = 0 ; $ln <= $#patch ; $ln++) {
		$patch[$ln] =~ s/__NETBLOCK__/$netblocks/g;
	}


	# apply the patch

	my @patched;
	my $i;
	for($i = 0 ; $i < $#squidconf ; $i++) {
		last if ($squidconf[$i] =~ /^http_access deny all/);
	}
	if ($i == ($#squidconf-1)) {
		print "Failed to apply patch to $sc. Didnt find 'http_access deny all' line\n";
		return;
	}
	$i--;
	@patched = @squidconf[0..$i];
	$i++;
	push @patched, (@patch, @squidconf[$i..$#squidconf]);

	# re-open squid.conf and write out the patched version

	backupFile($sc);

	$fh = new FileHandle $sc, "w";
	if (!defined($fh)) {
		print "Failed to open $sc $!\n";
		return;
	}
	print $fh @patched;
	$fh->close;
	return { 'netblocks' => $netblocks };

}

sub ask {
	my $prompt = shift;
	my $ok = 0;
	my $answer;
	while(!$ok) {
		print $prompt;
		$answer = <STDIN>;
		chomp($answer);
		print "You entered: $answer      Is this OK? [y/n] ";
		my $isok = <STDIN>;
		chomp($isok);
		$ok = 1 if ($isok =~ /^\s*y/i);
	}
	return $answer;
}
		
sub askUnlessExists {
	my $file = shift;
	return $file if (-f $file);

	my $done = 0;
	my $f2   = $file;
	while(!$done) {
		print "I can't find $f2 in this system. Where is it? ";
		$f2 = <STDIN>;
		$done = 1 if (-f $f2);
	}
	return $f2;
}


sub depatchConf {
	my ($b, $f) = (shift, shift);
	return unless (-f "$b/$f");

	lprint("Removing NetPass configuration from $b/$f ..\n");

	my $smarker = "## BEGIN-NETPASS";
	my $emarker = "## END-NETPASS";

	my $dst = new FileHandle "$b/$f", "r";
	die "cant open $b/$f for reading: $!" unless defined($dst);
	my @s = <$dst>;
	$dst->close;
	
	# check to see if the patch is NOT already applied

	if (!grep (/$smarker/, @s)) {
		lprint("$b/$f doesn't have any NetPass pieces to uninstall\n");
		return;
	}

        my $dst = new FileHandle "$b/$f", "w";
	die "cant open $b/$f for reading: $!" unless defined($dst);
        my $insec = 0;
        foreach (@s) {
		if (/$smarker/) {
			$insec = 1;
			next;
		}
		elsif(/$emarker/) {
			$insec = 0;
			next;
		}
		if($insec == 0) {
			print $dst $_;
		}
        }
            
	$dst->close;

	return;
}

sub patchConf {
	my ($b, $f, $rh) = (shift, shift, shift);

	ll("Patching configuration file: $b/$f");

	return unless (-f "$b/$f");

	backupFile("$b/$f");

	my $src = new FileHandle "$PKGDIR/install.d/$f", "r";
	ldie "cant open $PKGDIR/install.d/$f for reading: $!" unless defined($src);
	my @d = <$src>;
	$src->close;

	my $dst = new FileHandle "$b/$f", "r";
	ldie "cant open $b/$f for reading: $!" unless defined($dst);
	my @s = <$dst>;
	$dst->close;

	# find the ID marker

	my $marker = "";
	foreach (@d) {
		if (/^##/) {
			$marker = $_;
			last;
		}
	}
	if ($marker eq "") {
		lprint "WARNING: no ## marker found in $PKGDIR/install.d/$f\n";
		return;
	}

	# perform any search/replace instructions

	if (ref($rh) eq "HASH") {
		foreach my $srk (keys %$rh) {
			searchReplace(\@d, $srk, $rh->{$srk});
		}
	}

	# check to see if the patch is already applied

	if (grep (/$marker/, @s)) {
		lprint "patch $PKGDIR/install.d/$f already applied to $b/$f\n";
		return;
	}

	ll("Patch contains: ", @d);

	## BEGIN-NETPASS APPEND
	## BEGIN-NETPASS REPLACE ^OPTIONS=
	## BEGIN-NETPASS AFTER   ^OPTIONS=
	## BEGIN-NETPASS BEFORE  ^OPTIONS=

	my $placeWhere = "APPEND";
	my $placeRE    = "";

	if ($marker =~ /^##\s+\S+\s+(\S+)\s+(\S+)/) {
		$placeWhere = $1;
		$placeRE    = $2;
	}


	if ($placeWhere eq "APPEND") {
		my $dst = new FileHandle "$b/$f", "a";
		ldie "cant open $b/$f for appending: $!" unless defined($dst);
		print $dst @d;
		$dst->close;
		return;
	} 

	my $src = new FileHandle "$b/$f", "r";
	ldie "cant open $b/$f for reading: $!" unless defined($dst);
	my @orig = <$src>;
	$src->close;

	my $dst = new FileHandle "$b/$f", "w";
	ldie "cant open $b/$f for writing: $!" unless defined($dst);
	foreach my $line (@orig) {
		if ($line =~ /$placeRE/) {
			if    ( $placeWhere eq "REPLACE" ) {
				print $dst @d;
			}
			elsif ( $placeWhere eq "AFTER" ) {
				print $dst $line, @d;
			}
			elsif ( $placeWhere eq "BEFORE" ) {
				print $dst @d, $line;
			}
		} else {
			print $dst $line;
		}
	}
	my @orig = <$src>;
	$src->close;
}

sub cwd {
	my $x = `/bin/pwd`;
	chomp($x);
	return $x;
}

sub installPrebuilt {
	my ($burl, $f, $dst) = (shift, shift, shift);
	my ($dr, $dv) = whatdist();

	my $yn = ask("Install pre-built binary $f into $dst? [Y/N] ");
	return 0 unless ($yn =~ /^y/i);
	lprint("Installing pre-built binary\n\t\tfrom $burl/$dr$dv/$f\n\t\tinto $dst\n");
	fetchRemoteFile($burl."/$dr$dv", $f);
	my $cwd = cwd();
	chdir ("/opt");
	my $cwd2 = cwd();
	die "chdir failed? /opt != $cwd2\n" unless ("/opt" eq $cwd2);
	my $unzip = "/usr/bin/bunzip2";
	$unzip = "gunzip" if ($f =~ /(\.gz|\.tgz)$/);
	my $cmd = "$unzip -c /tmp/$f | tar -xf -";
	lsystem($cmd);
	
	chdir($cwd);
	return 1;
}


sub fetchRemoteFile {
	my ($burl, $f) = (shift, shift);

	if (-f "/tmp/$f") {
		my $ans = ask("/tmp/$f exists. Use that or Re-download it? [U/R] ");
		ll ("/tmp/$f exists.\n");
		return if ($ans =~ /^u/i);
	}

	ll("refetching $burl/$f to /tmp/$f at user's request\n");

	lsystem ("wget -P /tmp -q $burl/$f");
	die "couldnt download $burl/$f to /tmp/$f" unless (-f "/tmp/$f");
}

sub installHTMLArea {
	my $pkgd = shift;
	my $dst = shift;

	lprint "Installing $HTMLAREA ..\n";

	fetchRemoteFile("http://foobar.cit.buffalo.edu/netpass", "${HTMLAREA}.zip");

	my $newd = $TARGET."/www/htdocs/Admin/Editor";

	lprint "Installing $HTMLAREA into $newd ..\n";

	my $cwd = cwd();
	chdir ($newd);
	my $cwd2 = cwd();
	die "chdir failed? $newd != $cwd2\n" unless ($newd eq $cwd2);
	mkdir "htmlarea";
	chdir($newd."/htmlarea");
	lsystem("/usr/bin/unzip -q /tmp/${HTMLAREA}.zip");
	lsystem("/bin/mv ${HTMLAREA}/* .");
	unlink("index.html");
	lsystem("/bin/touch index.html");
	lsystem("/bin/touch index.mhtml");
	lsystem("/usr/bin/find $HTMLAREA -type f -exec chmod 644 {} \\;");
	lsystem("/usr/bin/find $HTMLAREA -type d -exec chmod 755 {} \\;");
	lprint "Done\n";
	chdir($cwd);
}

sub dirname {
	my $path = shift;
	$path =~ /(.*)\/[^\/]*$/;
	return $1;
}

sub removeTree {
	my $dst = shift;

	print "Removing files from $dst ..\n";
	
	if (-f $dst."/etc/netpass.conf") {
		print "Copying $dst/etc/netpass.conf  to /tmp. Save it if you want it.\n";
		system("/bin/cp '$dst/etc/netpass.conf' /tmp");
	}

	print "Remove $dst [y/n]? ";
	my $ans = <STDIN>;
	if ($ans =~ /^\s*y/) {
		system("/bin/rm -fr $dst");
		print "Done.\n";
	} else {
		print "OK. I won't remove it.\n";
	}
	return;



	my $fh = new FileHandle $dst."/MANIFEST", "r";
	if (!defined($fh)) {
		print "No $dst/MANIFEST file found. Can't remove files.\n";
		return;
	}

	my $dirs;
	while(my $l = <$fh>) {
		chomp $l;
		$dirs->{dirname($l)} = 1;
		unlink ($dst."/".$l) if (-f $dst."/".$l);
	}

	my $nps = 0;
	if (-f $dst."/etc/netpass.conf") {
		print "Backing up $dst/etc/netpass.conf to $dst/etc/netpass.conf.save\n";
		system("/bin/mv '$dst/etc/netpass.conf' '$dst/etc/netpass.conf.save'");
		$nps = 1;
	}

	if (-d $dst."/www/htdocs/Admin/Editor/htmlarea") {
		print "Removing $HTMLAREA ..\n";
		system("/bin/rm -fr '$dst/www/htdocs/Admin/Editor/htmlarea'");
	}

	# remove symlinks

	unlink ($dst."/www/htdocs/index.mhtml");
	unlink ($dst."/www/htdocs/resources");

	print "Removing directories\n";
	foreach (sort { lc($b) cmp lc($a) } keys %$dirs) {
		next if ($_ eq "etc" && $nps);
		print "     $dst/$_\t\t\t";
		if ( rmdir($dst."/$_") ) {
			print "failed: $!\n";
		} else {
			print "OK\n";
		}
	}
}

sub copyTree {
	my ($src, $dst, $copyOnly, $excludes) = (shift, shift, shift, shift);

	my $exre = "";
	if ( (ref($excludes) eq "ARRAY") && ($#{$excludes} > -1) ) {
		$exre = "(".join('|', @$excludes).")";
	}

	my $DH;
	opendir($DH, $src) || ldie "cant open $src $!";
	while(my $f = readdir($DH)) {
		next if ($copyOnly && ($f eq "netpass.conf"));
		next if ($f =~ /^\.{1,2}$/);
		next if ($f eq "install.d");
		next if ($f eq "CVS");
		next if ($f =~ /~$/);
		if ("$src/$f" =~ /$exre/) {
			print "\nexcluding file $src/$f\n";
		} 
		next if ( ($exre ne "") && ($f =~ /$exre/) );
		if (-d "$src/$f") {
			mkdir "$dst/$f" || ldie "cant mkdir $dst/$f";
			copyTree("$src/$f", "$dst/$f", $copyOnly, $excludes);
		} else {
			print lt80("$src/$f"), "\r";
			unlink ("$dst/$f");
			system(qq{/bin/cp -p "$src/$f" "$dst/$f"});
			print " " x 80, "\r";

			ldie "cp $src/$f $dst/$f  failed $!"
			  unless (-f "$dst/$f")
		}
	}
	closedir($DH);
}

sub lt80 {
	my $s = shift;
	return "... ".substr($s, -75) if length($s) > 79;
	return $s;
}

sub touch {
	my $file = shift;
	system (qq{/bin/touch "$file"}) if (!-f $file);
}

sub checkKit {
	my $d = shift;

	print "Checking kit ($d) ..  ";

	my $fh = new FileHandle $d."/MANIFEST", "r";
	while(my $l = <$fh>) {
		chomp $l;
		spinner::spinner();
		if (!-f $l) {
			print Carp::longmess("\nkit corrupt. missing file $d/$l\n");
			exit 255;
		}
	}
	print "\b OK.\n";
	$fh->close;
}

sub getVersion {
	my $dir = shift;
	my $fh;
	($fh = new FileHandle "$dir/VERSION", "r" )
		|| ldie Carp::longmess("distribution corrupt. file missing: $dir/VERSION");
	my $VERSION=<$fh>;
	chomp $VERSION;
	$fh->close;
	return $VERSION;
}

sub welcome {
	my $v = shift;
	print <<EOF;
Welcome to NetPass v$v!
EOF
}

sub squidGuardConfig {
	my $cf = shift;
	my $sn = shift;

	ll ("Patching $cf with servername=$sn\n");

	my $fh = new FileHandle $cf, "r";
	ldie "cant open $cf for reading: $!" unless defined ($fh);
	my @orig = <$fh>;
	$fh->close;
	my $fh = new FileHandle $cf, "w";
	ldie "cant open $cf for writing: $!" unless defined ($fh);
	foreach my $line  (@orig) {
		if ($line =~ /redirect 302:http/) {
			print $fh "\t\tredirect 302:http://$sn/?url=%u\n";
		} else {
			print $fh $line;
		}
	}
	$fh->close;
}

sub apacheConfig {
	my $srcConf = shift;
	my $dstConf = shift;

	my $a = ask( "Configure Apache's httpd.conf file? [Y/N] ");
	return unless ($a =~ /^y/i);

	my $fh = new FileHandle $srcConf, "r";
	if (!defined($fh)) {
		ldie Carp::longmess "failed to open $srcConf $!\n";
	}
	my @conf = <$fh>;
	$fh->close;

	my $mt = getMemTotal();
	# 10M per concurrent user is probably optimistic
	my $mc = int($mt / 10);


	# ^#MaxClients


	print "We're going to set MaxClients to $mc (10MB of memory 
per concurrent user). This limits the total number of concurrent 
connections that can be handled.\n";

	my $MaxClients = ask ("If you want to set it to something else enter it now or just hit
ENTER to keep our value: ");
	$MaxClients ||= $mc;
	ll("Apache httpd.conf\nMaxClients=$MaxClients\n");
	apacheConfig_set(\@conf, '^#MaxClients', "MaxClients $MaxClients");


	# ^#ServerAdmin


	my $ServerAdmin = ask ("Enter an email address of the person/group that administers this webserver: ");
	ll ("ServerAdmin=$ServerAdmin\n");
	apacheConfig_set(\@conf, '^ServerAdmin', "ServerAdmin $ServerAdmin");

	# ^#ServerName

	my $ServerName = ask ("Enter this server's name (e.g. netpass.your.co). If you are running 
in HA mode, then this is the name of the virtual server. Otherwise it's this machine's 
real name.\n\n");

	ll ("ServerName=$ServerName\n");
	apacheConfig_set(\@conf, '^ServerName', "ServerName $ServerName");

	#XXX
	squidGuardConfig("/opt/squidguard/SquidGuard.conf", $ServerName);

	my $ssl = ask ("Do you want to enable SSL/HTTPS (we won't make the certificates for you)? [Y/N] ");
	if ($ssl =~ /^y/i) {
		# VirtualHost.*:443
		#     ^#ServerName
		#     ^#ServerAdmin
		#     ^#SSLCertificateFile
		#     ^#SSLCertificateKeyFile

		my $SSLCertificateFile;
		my $SSLCertificateKeyFile;

		$SSLCertificateFile    = ask ("Where's the certificate file located (full path, including the filename)? ");
		$SSLCertificateKeyFile = ask ("Where's the certificate key file located (full path, including the filename)? ");

		ll("SSLCertificateFile = $SSLCertificateFile\n");
		ll("SSLCertificateKeyFile = $SSLCertificateKeyFile\n");
	}

	$fh = new FileHandle $dstConf, "w";
	if (!defined($fh)) {
		ldie Carp::longmess "Failed to open $dstConf for writing $!\n";
	}
	print $fh @conf;
	$fh->close;


	# read in the Session.pm file and configure it

	my $conf = "/opt/netpass/lib/NetPass/WWW/Session.pm.file";
	   $fh = new FileHandle $conf, "r";
	if (!defined($fh)) {
		ldie Carp::longmess "Failed to open $conf for reading $!\n";
	}
	@conf = <$fh>;
	$fh->close;

	
	my $cookieName = ask("NetPass uses cookies to track user sessions. Specific a name for the cookie (no spaces): ");
	my $cookieDomain = ask(qq{Specify a domain to restrict the cookie to (e.g. ".buffalo.edu"): });

	searchReplace(\@conf, '%COOKIENAME%', $cookieName);
	searchReplace(\@conf, '%COOKIEDATA%', '/cookies/data');
	searchReplace(\@conf, '%COOKIELOCK%', '/cookies/lock');
	searchReplace(\@conf, '%COOKIEDOM%',  $cookieDomain);

	$conf = "/opt/netpass/lib/NetPass/WWW/Session.pm";
	$fh = new FileHandle $conf, "w";
	if (!defined($fh)) {
		ldie Carp::longmess "Failed to open $conf for writing: $!\n";
	}
	print $fh @conf;
	$fh->close;

	# lib/NetPass/WWW/Session.pm
	#     my $cookieName = "UB-NetPass";
	#     $cookieName = "UB-Netpass-Devel";
	#     /cookies directory
	#     session_directory => '/cookies/data',
	#     session_lock_directory => '/cookies/lock',
	#     session_cookie_domain => '.buffalo.edu',

	return { 'ssl' => ($ssl =~ /^y/i ? 1 : 0) };
}

sub installLogrotate {
	# apache
	if ($APACHE_PB_INSTALLED) {
		lsystem("cp $PKGDIR/install.d/logrotate.d/apache /etc/logrotate.d/");
	}
	
	# netpass

	lsystem("cp $PKGDIR/install.d/logrotate.d/netpass /etc/logrotate.d/");
}

sub searchReplace {
	my $data    = shift;
	my $search  = shift;
	my $replace = shift;

	for (my $i = 0 ; $i <= $#$data ; $i++) {
		$data->[$i] =~ s/$search/$replace/g;
	}
}


sub whatdist {
	my ($rel, $ver) = getDistVersion("/etc/fedora-release");
	if (!defined($rel)) {
		($rel, $ver) = getDistVersion("/etc/redhat-release");
	}
	if (!defined($rel)) {
		ldie "unsupported operating system rel=$rel ver=$ver";
	}
	return ($rel, $ver);
}

sub getDistVersion {
	my $relfile = shift;

	my $fh = new FileHandle $relfile, "r";
	return undef unless defined $fh;
	my $l = <$fh>;
	$fh->close;
	chomp($l);
	ll("getDistVersion: line=<$l>\n");

	if ($l =~ /Fedora Core release (\d+)/i) {
		ll("getDistVersion: looks like FC $1\n");
		return ("FC", $1);
	}
	if ($l =~ /Red Hat Enterprise Linux [WA]S release (\d+)/i) {
		ll("getDistVersion: looks like RHAS $1\n");
		return ("RHAS", $1);
	}
	ll("getDistVersion: looks like an unsupported OS\n");
	return undef;
}

sub installReiserprogs {
	my ($rel, $ver) = (shift, shift);
	fetchRemoteFile("http://foobar.cit.buffalo.edu/netpass/ttt/RHAS".$ver,
			"reiserfsprogs-3.6.19-1.i386.rpm");
	lsystem("rpm -U /tmp/reiserfsprogs-3.6.19-1.i386.rpm");
}


sub configureNPSVC {
	my $cf = shift;
	my $sf = shift;

	# edit npsvc.conf

	print "\nWe use 'npsvc' to make sure critical processes are running.\n";
	my $em = ask ("Enter an email address that npsvc can mail if it spots something wrong: ");
	my $fh = new FileHandle $cf, "r";
	ldie "failed to open $cf for reading: $!" unless defined $cf;
	my $f2 = new FileHandle $sf, "w";
	ldie "failed to open $sf for writing: $!" unless defined $sf;
	while(my $line = <$fh>) {
		$line =~ s/%EMAIL%/$em/g;
		print $f2 $line;
	}
	$fh->close;
	$f2->close;
	lprint "NPSVC configuration file installed to $sf\n";
}


sub makeCookiesDir {
	if (-d '/cookies') {
		lprint ("Looks like /cookies already exists.\n");
		return;
	}

	# RHEL3 does not include reiserfs. we use reiser because the cookie
	# dir can grow to thousands of files and it can handle that better
	# than ext

	my ($rel, $ver) = whatdist();
	installReiserprogs($rel, $ver) if ($rel eq "RHAS");

	# dd a 1G file /var/cookies
	# mkreiserfs
	# mkdir /cookies
	# add mount to fstab, rw,noatime,loop
	# mount it
	# mkdir /cookies/data /cookies/lock
	# chmod -R 755 /cookies/data /cookies/lock
	# chown -R netpass:netpass /cookies

	lsystem("/bin/dd if=/dev/zero of=/var/cookies bs=1024 count=1024000")
	  && ldie Carp::longmess "/bin/dd failed $!";
	lsystem("mkdir /cookies")
	  && ldie Carp::longmess "mkdir failed $!";

	lsystem("/sbin/mkreiserfs -f -f -q -q /var/cookies")
	  && ldie Carp::longmess "/sbin/mkreiserfs failed $!"; 

	patchConf("/etc", "fstab");

	lsystem("/bin/mount /cookies")
	  && ldie Carp::longmess "/bin/mount /cookies failed $!";
	lsystem("mkdir -p /cookies/data /cookies/lock")
	  && ldie Carp::longmess "mkdir data/lock failed $!";
	lsystem("/bin/chown -R netpass:netpass /cookies") 
	  && ldie Carp::longmess "/bin/chown failed $!";
	lsystem("/bin/chmod -R 755 /cookies") 
	  && ldie Carp::longmess "/bin/chmod failed $!";
}


sub apacheConfig_set {
	my $c = shift;
	my $k = shift;
	my $l = shift;

	for (my $i=0 ; $i < $#$c ; $i++) {
		if ($c->[$i] =~ /$k/) {
			splice(@$c, $i, 1, $l);
			$i++;
		}
	}
}
			
sub getMemTotal {
	my $mt = new FileHandle "/proc/meminfo", "r";
	ldie Carp::longmess "failed to open /proc/meminfo $!" unless defined $mt;
	while(my $l = <$mt>) {
		chomp $l;
		if ($l =~ /MemTotal:\s+(\d+)\s+kB/) {
			return int($1/1024);
		}
	}
	my $ms = ask("I'm having trouble determining how much memory is in this machine.
Please tell me the number of megabytes: ");
	return $ms;
}

sub loadTables {
	my ($B, $S) = (shift, shift);
	return unless (-f "$B/$S");
	my $u = ask ("We'll now create the 'netpass' database and load the tables.\nWhat username should we connect with? [root] ");
	$u = "root" if($u eq "");
	my $p = ask ("What password should we connect with? [none] ");
	$p = "-p$p " if ($p ne "");
	if (-f "/etc/init.d/mysqld") {
		print "We're going to call '/etc/init.d/mysqld start'. If it's already running, that's OK.\n";
		lsystem("/etc/init.d/mysqld start");
	} else {
		ldie "It looks like mysql isnt installed? (I don't see the /etc/init.d/mysqld script)";
	}
	my $rv = lsystem("mysqladmin -u $u $p stat");
	if ($rv != 0) {
		ldie "It looks like mysql isnt running. (The 'mysqladmin -u $u $p stat' command failed with code $rv";
	}

	$rv = lsystem("mysqladmin -u $u $p create netpass");
	ldie "failed to create 'netpass' db" if $rv;
	$rv = lsystem("mysqladmin -u $u $p create sessions");
	$rv = lsystem("mysql -fu $u $p netpass < $B/$S");
	ldie "failed to load $B/$S into 'netpass' db" if $rv;

	$rv = lsystem("mysql -fu $u $p netpass < $B/install.d/pages.sql");
	ldie "failed to load $B/pages.sql into the database" if $rv;

	$rv = lsystem(qq{echo "insert into users values ('$u', 'Admin')" | mysql -fu $u $p netpass});
	ldie "failed to create '$u' netpass account" if $rv;

	$rv = lsystem(qq{echo insert into user values "('127.0.0.1', '$u', '', 'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0)" | mysql -fu $u $p mysql });
	ldie "failed to add 127.0.0.1 to table mysql:user" if $rv;

	$rv = lsystem(qq{echo insert into db values "('127.0.0.1', '%', '$u', 'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y')" | mysql -fu $u $p mysql});

	ldie "failed to add 127.0.0.1 to table mysql:user" if $rv;

	# redirectors

	foreach my $rd ($R->{'redir1'}, $R->{'redir2'}) {
		$rv = lsystem(qq{echo insert into db values "('$rd', '%', '$u', 'Y','N','N','N','N','N','N','N','N','N','N','N')" | mysql -fu $u $p mysql});
		ldie "failed to add $rd to mysql:db table ($rv)" if $rv;
		$rv = lsystem(qq{echo insert into user values "('$rd', '$u', '$p','y','n','n','n','n','n','n','n','n','n','n','n','n','n','n','n','n','n','n','n','n','','','','',0,0,0)" | mysql -fu $u $p mysql});
		ldie "failed to add $rd to mysql:user table ($rv)" if $rv;
	}

}

sub dropDatabase {
	my $u = ask ("We're going to delete the 'netpass' (and 'sessions') databases.\nWhat username should we connect with? [root] ");
	$u = "root" if ($u eq "");
	my $p = ask ("What password should we connect with? [none] ");
	$p = "-p$p " if ($p ne "");

	my $rv = lsystem("mysqladmin -u $u $p stat");
	if ($rv != 0) {
		ldie "It looks like mysql isnt running. (The 'mysqladmin -u $u $p stat' command failed with code $rv";
	}

	$rv = lsystem("mysqladmin -f -u $u $p drop netpass");
	lwarn "failed to drop the netpass database rv=$rv" if $rv;
	$rv = lsystem("mysqladmin -f -u $u $p drop sessions");
	lwarn "failed to drop the sessions database rv=$rv" if $rv;
}

sub installCrontab {
	my ($b, $f) = (shift, shift);
	if (-f "$b/$f") {
		lsystem("crontab -u netpass $b/$f");
	}
}

package spinner;
use strict;

my @S = ('|', '/', '-', '\\');
my $s = 0;
sub spinner {
	$s = ($s+1) % 4;
	my $p = ('|', '/', '-', '\\')[$s];
	print "\b$p";
	#for(my $i=0; $i<1000;$i++){}
}

1;
