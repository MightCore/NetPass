<%doc>
# $Header: /tmp/netpass/NetPass/www/htdocs/netpass.mhtml,v 1.9 2005/08/31 20:09:17 jeffmurphy Exp $

#   (c) 2004 University at Buffalo.
#   Available under the "Artistic License"
#   http://www.gnu.org/licenses/license-list.html#ArtisticLicense
</%doc>

<%init>
#use NetPass::LOG qw (_log);
</%init>

<%doc>
</%doc>

<%perl>

_log("DEBUG", "$$ ". $m->session->{'_session_id'}." calling /Client/GetInfo\n");
$m->comp('/Client/GetInfo', %ARGS);

my $mac = $m->session->{'remote_mac'};
my $ip  = $m->session->{'remote_addr'};

_log("DEBUG", "$mac $ip calling /Client/Login\n");
$m->comp('/Client/Login', %ARGS);

_log("DEBUG", "$mac $ip calling /Client/Validate\n");
$m->comp("/Client/Validate", %ARGS);

_log("DEBUG", "$mac $ip ".$m->session->{'_session_id'}." Phase: ".$m->session->{'phase'}."\n");

if($np->cfg->policy(-key => 'COOKIE_DETECT', -network => $ip)) {
	return if ($m->comp('/CookieDetect', 'mac' => $mac, 'ip' => $ip, %ARGS) != 1);
}

if($m->session->{'phase'} eq 'LOGIN') {
	$m->session->{'logged_in'} = 0;
	_log("DEBUG", "$mac $ip calling /Client/WelcomePage\n");
	$m->comp('/Client/WelcomePage', %ARGS);

} elsif($m->session->{'phase'} eq 'SCAN') {
	_log("DEBUG", "$mac $ip calling /Client/BeginScan session ".$m->session->{'_session_id'}."\n");
	$m->comp('/Audit', msg => [ "sessionid ".$m->session->{'_session_id'} ] );
	$m->comp('/Client/BeginScan', %ARGS);

} elsif($m->session->{'phase'} eq 'REMEDIATE') {
	_log("DEBUG", "$mac $ip calling /Client/Remediate\n");
	$m->comp('/Client/Remediate', %ARGS);

} elsif( ($m->session->{'phase'} eq 'COMPLETE') && ($m->session->{'remote_mac'} eq "REMOTE") ) {
	_log("DEBUG", "$mac $ip Phase is COMPLETE and we are REMOTE: show you passed and delete session\n");

	# We can't register b/c no MAC

	my $msg = $np->db->getPage(-name => 'msg:remote_you_passed', -nohtml => 1, ip => 'default',
					-npcfg => $np->cfg);
        my $msg2 = (defined($msg) && ($msg ne "")) ? $msg : "You are a remote user and you passed the scans successfully.";
	print $msg2;

	# then we delete their session completely so that they can do it again, if 
	# they want to.
	tied(%{$m->session})->delete;

} elsif($m->session->{'phase'} eq 'COMPLETE') {
 
	_log("DEBUG", "$mac $ip Phase is COMPLETE and we are LOCAL: show you passed, register and motd\n");
	my $url = $m->session->{'url'};

	if(!$url) {
		$url = $np->cfg->policy(-key => 'REDIR_URL_DEFAULT', -network => $ip);
	}
	
	if(ref($url) =~ /ARRAY/) {
		# this bug has been fixed, it should never happen...
		# but if it does, we'll catch it here
		$url = $url->[0];
	}

	my @msgs = ();

	if($m->session->{'returning_user'}) {
		push(@msgs, 'welcome_to_the_network');	
	} else {
		push(@msgs, 'you_passed');	
	}
	push(@msgs, 'daily_message');

	foreach my $msg (@msgs) {
		my $m = $np->db->getPage(-name => "msg:$msg", -nohtml => 1, -npcfg => $np->cfg,
						-ip => $ip );
        	next if (!defined($m));
		$m =~ s/\$original_destination/$url/g;
		print $m;
	}

	if ($np->cfg->policy(-key => 'AUTO_REDIRECT', -network => $ip) eq "yes") {
		print "<meta http-equiv=\"Refresh\" content=\"15;$url\">";
	}

	my $existingHost = $np->db->macIsRegistered($mac);

	_log("DEBUG", "$mac $ip registerHost()\n");
      	$np->db->registerHost($m->session->{'remote_mac'},
			     $m->session->{'remote_addr'},
                             $m->session->{'remote_os'},
                             $m->session->{'username'});

	# if this wasn't a pre-existing (already registered) host, then any
	# user-fixed results are converted to 'fixed'. the situation is:
	# a new client arrives, and clicks 'fixed' a bunch of times. since they
	# arent yet registered, they won't appear in quarctl, so an admin cant
	# change the results to 'fixed'. because of that, we dont apply strikes to
	# unregistered hosts. they can click 'fixed' as much as they like (but will
	# never get out of quarantine until they register). but, since we disable
	# strikes for unregistered hosts, but are still recording results for them,
	# once they register, all of those 'user-fixed' results get attached to
	# their registration and can exhaust their alotted strikes. so we change
	# them to 'fixed' upon registration - this allows us to keep some history
	# on the client, and give them a clean slate to start out with.

	if (!$existingHost) {
		_log("DEBUG", "$mac $ip changing user-fixed to fixed\n");
		my $ufr = $np->db->getResults(-mac => $mac, -status => 'user-fixed');
		if (ref($ufr) eq "HASH") {
			for (my $rn = 0 ; $rn <= $#{$ufr->{'rowid'}} ; $rn++) {
				my $rv = $np->db->updateResult(-mac => $mac, -ip => $ip,
								-rowid => $ufr->{'rowid'}->[0],
								-status => 'fixed');
				if ($rv) {
					_log("ERROR", "$mac $ip updateResult failed: $rv\n");
				}
			}
		}
	}

	my $sw = $m->session->{'switch'};
	my $po = $m->session->{'port'};
        
	# cache in db to improve performance

	$np->db->setSwitchPort($mac, $sw, $po);

	# at this point we want to send them back thru the validate process
        # one more time. since they are now registered and unquarantined,
        # the validate page will check for MULTI_MAC compliance and then
        # redirect them as appropriate.

	_log("DEBUG", "$mac $ip re-Validating (required to check multi-mac compliance after successful registration)\n");

	$m->comp("/Client/Validate", %ARGS);

	if($m->session->{'phase'} eq 'COMPLETE') {
		# if our phase is still COMPLETE, there are no problems with the validate
		_log("DEBUG", "$mac $ip phase is still COMPLETE. unquarantine!\n");

		if ($np->db->portMovePending(-switch => $sw, -port => $po)) {
			_log("DEBUG", "$mac $ip port move already pending for $sw $po\n");

			#print "Just a few more seconds .. please wait while your network connection is configured ..";
		} else {
			_log("DEBUG", "$mac $ip move port $sw $po\n");

			my $rmp = $np->db->requestMovePort(-switch => $sw, -port => $po, -vlan => 'unquarantine', -by => 'netpass.mhtml');
                	# XXX if $rmp == 0 then tell them that something bad has happened
        	}
	} else {
		_log("DEBUG", "$mac $ip phase is not COMPLETE (",
				$m->session->{'phase'},
				")\n");
	}
	# then we delete their session completely

	_log("DEBUG", "$mac $ip is finished. delete session\n");

	$m->session->{'phase'} = "LOGIN";
	$m->session->{'regStatus'} = undef;

	# this doesnt seem to do anything.
	tied(%{$m->session})->delete;

} else {}

################################################


return;

</%perl>
