<%doc>
# $Header: /tmp/netpass/NetPass/www/htdocs/Admin/qc.mhtml,v 1.23 2005/06/03 15:13:20 jeffmurphy Exp $

#   (c) 2004 University at Buffalo.
#   Available under the "Artistic License"
#   http://www.gnu.org/licenses/license-list.html#ArtisticLicense

</%doc>

<%args>
$ip     => '';
$mac    => '';
$uid    => '';
$search => '';
$submit => '';
$type   => 'AND';
$ids    => ();
$uqlinkup => '';
$status   => '';
</%args>

<script><!--
setWhereAmI('Quarantine Control');
--></script>

<%perl>

return unless $m->comp('/Admin/Login', %ARGS);

my @rwGroups = ('Admin', 'QuarAdmin');
my @roGroups = ('Reports');
my $readOnly = "disabled";
my @aclGroups = ();

my ($isRW, $rwGroups) = $m->comp('/Admin/MemberOf', 'acl' => [ @rwGroups ]);
my ($isRO, $roGroups) = $m->comp('/Admin/MemberOf', 'acl' => [ @roGroups ]);
my ($isRoot, $junk)   = $m->comp('/Admin/MemberOf', 'acl' => [ 'Admin' ], 'group' => 'default');

if ( $isRW ) {
	$readOnly = "";
} 
elsif ( $isRO ) {
	$readOnly = "disabled";
} 
else {
        print $q->p({-class=>'error'},
                "Sorry, you don't have permission to access this form.<P>");
	return;
}

my $statuses = ['QUAR','PQUAR','UNQUAR','PUNQUAR'];  # love the grammer!
my $msgs     = getAllMsgs($np->db->{'dbh'});

</%perl>

<h2>Quarantine Control</h2>

The "IP Address" field is the address that the client had <I>when they first registered</I>. It 
is <B>not necessarily</B> the address they have right now. So when quarantining a host, you
should really be searching by MAC Address. 

% use Sys::Hostname;
% if (hostname =~ /buffalo\.edu$/) {
To translate a currently assigned IP Address
into a MAC address, you can use some of the other tools available until we are able to
better integrate them into UB NetPass. <P>

These tools might require additional access. If you get an access denied, click on the 
"Apply for an account" link and apply for a  "Network Documentation" account. <P>

<ul>
  <li> <a target="_blank" href="http://netstats.cit.buffalo.edu/Maps/Layer2Traceroute.cgi">Layer 2
       Traceroute</a>
  <li> <a target="_blank" href="http://netstats.cit.buffalo.edu/oss-bin/macip.cgi">IP to MAC Translator</a>
</ul>
%}

<script language="JavaScript"><!--
function quarctl_setresult_rv(r) {
	if (r) {
		var ra = r.split(/\s+/);
		var i = 0;
		while (i < ra.length && ra[i] != "OK" && ra[i] != "NOK") { i++ }

		// OK rowid 
		// NOK rowid

		if ( (ra.length >= 2) && (ra[i] == "OK")) {
			var o = document.getElementById('results-row-'+ra[i+1]);
			if (o) {
				o.style.display = 'none';
			}
		}
	}
}

function quarctl_changeResult(ma, rid) {
	if (ma && rid) {
		var o = document.getElementById('results-status-'+rid);
		if (o) {
			var url = "cmd/setresult.mhtml?printable=2&ma="+ma+"&rid="+rid+"&st="+o.value;
			xmlhttp.open("GET", url, true);
			xmlhttp.onreadystatechange = function() {
				if (xmlhttp.readyState == 4) {
					quarctl_setresult_rv(xmlhttp.responseText);
				}
			};
			xmlhttp.send(null);
		}
	}
	return false;
}

function quarctl_onchange_status(ma) {
	if (ma) {
		var mf = document.getElementById('message:' + ma);
		var sf = document.getElementById('status:' + ma);
		if (mf && sf) {
			if ( (sf.value == "QUAR") || (sf.value == "PQUAR") ) {
				mf.disabled = false;
			} else {
				mf.disabled = true;
			}
		}
	}
}

--></script>

<%perl>
print $q->start_form(-method => "POST");

print $q->table({-border=>0, -width=>600},
		$q->TR(
			$q->th({-colspan=>2}, "Search")
		).
		$q->TR(
			$q->td({-class=>"gray"}, "IP Address:") .
			$q->td({-class=>"gray"},
				$q->textfield(
						-name 	=> "ip",
						-value 	=> $ip,
						-filter => '/^\d+\.\d+\.\d+\.\d+$/',
						-error	=> 'Please format the IP Address in the format specified.'
				).
				$q->small(' e.g. '.$np->cfg->policy(-key => 'EXAMPLE_IPADDR', -network => $ENV{'REMOTE_ADDR'}))
			)
		).
		$q->TR(
			$q->td({-class=>"gray"}, "MAC Address:") .
			$q->td({-class=>"gray"},
				$q->textarea(
						-name 	=> "mac",
						-value 	=> $mac,
						-id     => 'mac',
						-cols   => 18, -rows => 1, 
						#-filter => '/^\w{2}:{0,1}\w{2}:{0,1}\w{2}:{0,1}\w{2}:{0,1}\w{2}:{0,1}\w{2}$/',
						#-error	=> 'Please format the MAC Address in the format specified.'
				).
				qq{<a href="javascript:clearField('mac');"><img 
                                     src="/resources/images/trashcan_full.png"
                                     alt="Clear Field" border='0' width=32 height=32
                                   ></a>  },

				$q->small('one per line')
			)
		).
		$q->TR(
			$q->td({-class=>"gray"}, $np->cfg->policy(-key => 'USERNAME_PROMPT', -network => $ENV{'REMOTE_ADDR'}) || "Username:") .
			$q->td({-class=>"gray"},
				$q->textfield(
						-name 	=> "uid",
						-value 	=> $uid, 
				)
			)
		).
		$q->TR(
			$q->td({-class=>"gray"}, "Status:") .
			$q->td({-class=>"gray"},
				$q->popup_menu(
						-name 	=> "status",
						-value 	=> [ '', @$statuses ],
						-default => $status
				)
			)
		).
		$q->TR(
			$q->td({-class=>"gray"}, "Unquar When?") .
			$q->td({-class=>"gray"},
                                        $q->popup_menu(
                                                        -name    => "uqlinkup",
                                                        -values  => [ '', 'no', 'yes' ],
                                                        -labels  => {
									"" => "",
                                                                        "no" => "Web Visit",
                                                                        "yes" => "Link Up"
                                                                     },
                                                        -default => $uqlinkup
				)
			)
		).
		$q->TR(
			$q->td({-class=>"gray"}, "Search Type:") .
			$q->td({-class=>"gray"},
				$q->popup_menu(
						-name 	 => "type",
						-values	 => [
								"AND",
								"OR"
							    ],
						-labels	 => {
								"AND" => "Results must match ALL of the above",
								"OR"  => "Results must match ANY of the above"
							    },
						-default => $type, 
				)
			)
		).
		$q->TR(
			$q->td({-class=>"gray"}, '&nbsp;') .
			$q->td({-class=>"gray"},
				$q->submit(
						-name 	=> "search",
						-value 	=> "Search"
				)
			)
		)
	);

goto end_of_page if(!$submit && !$search);

if($submit) {
	if ($readOnly eq "") {
        	my $sqr = saveQuarChanges($np->db->{'dbh'}, \%ARGS, $ids, $isRoot, $rwGroups, $roGroups);
		if ($sqr ne "") {
			print $q->p({-class=>"error"}, $sqr);
		}
	} else {
		# this really shouldnt happen. we dont give them a submit button
		$np->db->audit( -user     => $m->session->{'username'},
				-severity => "ALERT",
                                -msg      => [ "tried to change QuarControl but is ReadOnly" ]);

	}
}

my ($results, $count) = getQuars($np->db->{'dbh'}, $ip, $mac, $uid, $type, $status, $uqlinkup);

if($count<0) {
	print "Sorry, there was an error while processing your request! ($results)";
}

print $q->h4("Your search returned $count result(s)");

if($count==0) {
	print $q->p("You may want to re-define your search to be less strict.<br>I would suggest removing one or more fields and modifying the Search Type.");
	return;
}

my @rows = ();

</%perl>
<table width='80%'>
<tr><td colspan=8></td>
    <td colspan=2 align='right'><input type='submit' name='submit' value='Save Changes' <%$readOnly%>></td>
</tr>
<tr><th>Registered On</th><th>Last Seen</th><th><%$np->cfg->policy(-key => 'USERNAME_PROMPT', -network => $ENV{'REMOTE_ADDR'}) || "Username"%>
    <th>IP Address</th><th>MAC Address</th><th>Unquar<BR>When?</th><th>Status</th><th>Incident<BR>History</th><th>Results<br><span style='font-size:10pt;'>Pending/U-Fixed</span></th><th>Add Result</th></tr>

%while (my $row = $results->fetchrow_hashref() ) {
%	my $myPendingResults = $np->db->getResults(-mac => $row->{'macAddress'}, -status => 'pending');
%	my $myUFixedResults  = $np->db->getResults(-mac => $row->{'macAddress'}, -status => 'user-fixed');
%	my $nPR = 0;
%	my $nUFR = 0;
%       my $macAddress = $row->{'macAddress'};
%       my $disabled = ($row->{'status'} =~ /^[P]{0,1}QUAR$/i) ? "" : "disabled";
%
%	if (ref($myPendingResults) eq "HASH") {
%		$nPR = $#{$myPendingResults->{'type'}} + 1;
%	} else {
%		print "<P class='error'>getResults($macAddress) failed: $myPendingResults</P>";
%	}
%	if (ref($myUFixedResults) eq "HASH") {
%		$nUFR = $#{$myUFixedResults->{'type'}} + 1;
%	} else {
%		print "<P class='error'>getResults($macAddress) failed: $myUFixedResults</P>";
%	}

<tr>
	<td align='center'><%$row->{'lastSeen'}%>
                <input type='hidden' name='ids'                          value="<%$macAddress%>">
                <input type='hidden' name='ipAddr:<%$macAddress%>'       value="<%$row->{'ipAddress'}%>">
                <input type='hidden' name='messageOrig:<%$macAddress%>'  value="--None--">
                <input type='hidden' name='uqlinkupOrig:<%$macAddress%>' value="<%$row->{'uqlinkup'}%>">
                <input type='hidden' name='statusOrig:<%$macAddress%>'   value="<%$row->{'status'}%>">
        </td>
	<td align='center'><%$row->{'registeredOn'}%></td>
	<td align='center'><%$row->{'username'}%></td>
	<td align='center'><%$row->{'ipAddress'}%></td>
	<td align='center'><code><%$row->{'macAddress'}%></code></td>
	<td align='center'><%$q->popup_menu(-name    => "uqlinkup:" . $row->{'macAddress'},
                                            -values  => [ 'no', 'yes' ],
                                            -labels  => {
                                                         "no" => "Web Visit",
                                                         "yes" => "Link Up"
                                                        },
                                            -default => $row->{'uqlinkup'}, $readOnly)%></td>
	<td align='center'><%$q->popup_menu(-name    => "status:" . $row->{'macAddress'},
                                            -values  => $statuses,
                                            -labels  => {
                                                          "" => "Default Description"
                                                        },
					    -id => 'status:' . $macAddress,
					    -onchange => qq{quarctl_onchange_status('$macAddress');},
                                            -default => $row->{'status'}, $readOnly)%></td>
	<td align='center'><a href="clienthistory.mhtml?mac=<%$macAddress%>">[ view ]</a></td>
	<td align='center'><a onclick='return showHideObj2("results-<%$macAddress%>");' href="">[ <%$nPR%>/<%$nUFR%> ]</a></td>
	<td align='center'><%$q->popup_menu(-name    => "message:" . $row->{macAddress},
                                            -values  => $msgs,
					    -id      => 'message:'. $macAddress,
                                            -default => "--None--", $readOnly||$disabled)%></td>
</tr>
	<tr style='display:none;' id='results-<%$macAddress%>'><td colspan=7></td><td colspan=3>
%	if ($nUFR || $nPR) {
		<table width='100%'>
		<tr><th>Type</th><th>ID</th><th>Time Entered</th><th>Status</th></tr>
%		for(my $rn = 0 ; $rn <= $#{$myPendingResults->{'type'}} ; $rn++) {
			<tr id='results-row-<%$myPendingResults->{'rowid'}->[$rn]%>'>
			<td><%$myPendingResults->{'type'}->[$rn]%></td>
			<td><%$myPendingResults->{'id'}->[$rn]%></td>
			<td><%$myPendingResults->{'dt'}->[$rn]%></td>
			<td><%$q->popup_menu(-name     => 'result:'.$macAddress, 
                                             -values   => [ 'pending', 'fixed', 'user-fixed' ],
                                             -default  => $myPendingResults->{'status'}->[$rn],
					     -id       => qq{results-status-$myPendingResults->{'rowid'}->[$rn]},
                                             -onchange => qq{quarctl_changeResult('$macAddress',
                                                                                  '$myPendingResults->{'rowid'}->[$rn]')})%></td>
			</tr>
%		}
%		for(my $rn = 0 ; $rn <= $#{$myUFixedResults->{'type'}} ; $rn++) {
			<tr id='results-row-<%$myUFixedResults->{'rowid'}->[$rn]%>'>
			<td><%$myUFixedResults->{'type'}->[$rn]%></td>
			<td><%$myUFixedResults->{'id'}->[$rn]%></td>
			<td><%$myUFixedResults->{'dt'}->[$rn]%></td>
			<td><%$q->popup_menu(-name     => 'result:'.$macAddress, 
                                             -values   => [ 'pending', 'fixed', 'user-fixed' ],
                                             -default  => $myUFixedResults->{'status'}->[$rn],
					     -id       => qq{results-status-$myUFixedResults->{'rowid'}->[$rn]},
                                             -onchange => qq{quarctl_changeResult('$macAddress',
                                                                                  '$myUFixedResults->{'rowid'}->[$rn]')})%></td>
			</tr>
%		}
		</table>
%	} else {
		No results worth mentioning.
%       }
	</td></tr>
%}

<tr><td colspan=8></td>
    <td colspan=2 align='right'><input type='submit' name='submit' value='Save Changes' <%$readOnly%>></td>
</tr>
</table>

% end_of_page:;
<P>
<form>

<%perl>

#######################

sub defne {
	my $string = shift;
	return 0 if !defined($string);
	return 0 if ($string eq "");
	return 1;
}

sub getQuars {
	my $dbh	     = shift;
	my $ip       = shift;
	my $mac	     = shift;
	my $uid	     = shift;
	my $type     = shift;
	my $status   = shift;
	my $uqlinkup = shift;

	# double check the value, make sure noone can sneak an insertion attack in here ;)
	$type = ($type eq "OR")?"OR":"AND";
	
	my @clause = ();
	my @params = ();

	if($mac) {
		$mac =~ s/\n/ /g;
		$mac =~ s/\r/ /g;
		$mac =~ s/\s+/ /g;
		my @macList = split(/\s/, $mac);
		if ($#macList > 0) {
			my @_clause;
			for(my $ml = 0; $ml <= $#macList ; $ml++) {
				next unless $macList[$ml] ne "";
				$macList[$ml] =~ s/://g;
				$macList[$ml] = lc($macList[$ml]);
				push @_clause, "macAddress=?";
			}
			push(@clause, 
				" ( ". 
					join(" OR ", @_clause).
				" ) " );
			push(@params, @macList);
		} else {
			$mac =~ s/://g;
			$mac = lc($mac);
			push(@clause, "macAddress=?");
			push(@params, $mac);
		}
	}
	
	if($ip) {
		push(@clause, "ipAddress=?");
		push(@params, $ip);
	}
	
	if($uid) {
		push(@clause, "username=?");
		push(@params, $uid);
	}

	if($status) {
		push(@clause, "status=?");
		push(@params, $status);
	}

	if($uqlinkup) {
		push(@clause, "uqlinkup=?");
		push(@params, $uqlinkup);
	}

	my $query = "SELECT DATE_FORMAT(lastSeen, '%Y-%m-%d %H:%i:%s') as lastSeen, DATE_FORMAT(registeredOn, '%Y-%m-%d %H:%i:%s') as registeredOn, username, macAddress, ipAddress, OS, status, uqlinkup FROM register";
	
	if($#clause>-1) {
		$query .= " WHERE " . join(" $type ", @clause)
	}

	$query .= " ORDER BY registeredOn";

	#print "QUERY=$query<P>";
	#print "PARMS=",join(',', @params), "<P>";

	my $sth = $dbh->prepare($query);

	if(!defined($sth)) {
        	return ("prepare failed: ". $dbh->errstr, -1);
    	}
    
	if( !$sth->execute(@params) ) {
        	return ("execute failed: ". $dbh->errstr, -1);
    	}

    	my $count = $sth->rows;

	return ($sth, $count);

}

sub getAllMsgs {
        my $dbh = shift;

        my $query = "SELECT distinct(name) FROM pages order by name";
        my $sth = $dbh->prepare($query);
        $sth->execute();

        my @msgs = ('');

        while(my $m = $sth->fetchrow_arrayref) {
                push(@msgs, $m->[0]); 
        }

        $sth->finish;

	# sort msgs so that msg:\D are at the top and
	# msg:\d are at the bottom

	my @msgs_D;
	my @msgs_d;
	my @msgs_huh;

	foreach my $m (@msgs) {
		if ($m =~ /^msg:\D/) {
			push @msgs_D, $m;
		} 
		elsif ($m =~ /^msg:\d/) {
			push @msgs_d, $m;
		}
		else {
			push @msgs_huh, $m;
		}
	}

	@msgs = ('--None--', @msgs_D, @msgs_d, @msgs_huh);
        return \@msgs;

}

sub LA {
	my $l = shift;
	my $e = join(' ', @_);
	$m->comp('/Audit', msg => [ $e ]);
	_log($l, $e, "\n");
}

sub saveQuarChanges {
        my $dbh  = shift;
        my $args = shift;
        my $ids  = shift;
	my $isRoot   = shift;
	my $rwGroups = shift;
	my $roGroups = shift;

	my $D    = 0;

	if(!(ref($ids) =~ /ARRAY/) ) {
		$ids = [$ids];
	} 

	my $rv = "";
	my @rv;

	my $sql = "UPDATE register SET status=?, uqlinkup=? WHERE macAddress = ?";
        my $sth   = $dbh->prepare($sql);
	if (!defined($sth)) {
		return "Failed to prepare sql: ".$dbh->errstr;
	}

	my $resultsRV = '';

        foreach my $mac (@$ids) {
		# if nothing's changed, then dont bother with the db transaction

		my $m_unc = 1;
		my $s_unc = 1;
		my $u_unc = 1;

		print "debug: processing mac $mac<P><UL>\n" if $D;
		# if message is "" then status is probably unquar and the field
		# is disabled, resulting in an empty value.
		if ( ($args->{"message:$mac"} eq "") || ($args->{"message:$mac"} eq $args->{"messageOrig:$mac"}) ) {
			if ($D) {
				print "debug: message is unchanged.<P>\n";
				print qq{M=|$args->{"message:$mac"}|<P>\n};
				print qq{MO=|$args->{"messageOrig:$mac"}|<P>\n};
			}
			$m_unc = 1;
		} else {
			if ($D) {
				print "debug: message is changed.<P>\n";
				print qq{M=|$args->{"message:$mac"}|<P>\n};
				print qq{MO=|$args->{"messageOrig:$mac"}|<P>\n};
			}
			$m_unc = 0;
		}

		if ( ($args->{"status:$mac"} eq $args->{"statusOrig:$mac"}) ) {
			if ($D) {
				print "debug: status is unchanged.<P>\n";
				print qq{S=|$args->{"status:$mac"}|<P>\n};
				print qq{SO=|$args->{"statusOrig:$mac"}|<P>\n};
			}
			$s_unc = 1;
		} else {
			if ($D) {
				print "debug: status is changed.<P>\n";
				print qq{S=|$args->{"status:$mac"}|<P>\n};
				print qq{SO=|$args->{"statusOrig:$mac"}|<P>\n};
			}
			$s_unc = 0;
		}

		if ( ($args->{"uqlinkup:$mac"} eq $args->{"uqlinkupOrig:$mac"}) ) {
			if ($D) {
				print "debug: uqlinkup is unchanged.<P>\n";
				print qq{S=|$args->{"uqlinkup:$mac"}|<P>\n};
				print qq{SO=|$args->{"uqlinkupOrig:$mac"}|<P>\n};
			}
			$u_unc = 1;
		} else {
			if ($D) {
				print "debug: uqlinkup is changed.<P>\n";
				print qq{S=|$args->{"uqlinkup:$mac"}|<P>\n};
				print qq{SO=|$args->{"uqlinkupOrig:$mac"}|<P>\n};
			}
			$u_unc = 0;
		}

		print "</UL>\n" if $D;
		next if ( $m_unc && $s_unc && $u_unc );

		# we're being somewhat trusting here. to be thorough, refetch IP from
		# db based on mac

		my $nw       = $np->cfg->getMatchingNetwork(-ip => $args->{"ipAddr:$mac"});
		my $netgroup = $np->cfg->getNetgroup(-network => $nw);

		if ($nw eq "none") {
			print qq{<p class='error'>Update failed for $mac because it's network is unknown to NetPass.</P>};
			next;
		}

		if ( !$isRoot && !grep(/^$nw$/, @$rwGroups) && !grep(/^$netgroup$/, @$rwGroups) ) {
			print qq{<P class='error'>Update failed for $mac because you don't have the proper permissions for it's network ($nw)</P>};
			next;
		}

		if($D) {
			print "<PRE>[debugging output - ignore this]\n";
			print "mac ".$mac."\n";
			print "m |", $args->{"message:$mac"},      "|\n";
			print "mO |", $args->{"messageOrig:$mac"}, "|\n";
			print "s |", $args->{"status:$mac"},       "|\n";
			print "sO |", $args->{"statusOrig:$mac"},  "|\n";
			print "u |", $args->{"uqlinkup:$mac"},       "|\n";
			print "uO |", $args->{"uqlinkupOrig:$mac"},  "|\n";
			print "[end of debugging output]</PRE>\n";
		}

		my @params = ();
                push(@params, $args->{"status:$mac"});

		# if status is PQUAR then message is required.
		# if status is QUAR message is optional and can be NULL.
		# if status is P/UNQUAR the message is implicitly NULL

		if ($args->{"status:$mac"} eq "PQUAR") {
			if ($args->{"message:$mac"} eq "--None--") {
				return "Error: $mac PQUAR requires that you specify a message.";
			} else {
				$resultsRV = $np->db->addResult(-mac => $mac, -type => 'manual', 
								   -id => $args->{"message:$mac"});
			}
		}

		elsif ($args->{"status:$mac"} eq "QUAR") {
			if ($args->{"message:$mac"} eq "--None--") {
			} else {
				$resultsRV = $np->db->addResult(-mac => $mac, -type => 'manual', 
								-force => 1,
								-id => $args->{"message:$mac"});
			}
		}

		elsif ($args->{"status:$mac"} =~ /^(UNQUAR|PUNQUAR)$/) {
			#push @params, undef;
		} else {
			LA("ERROR", $m->session->{'username'}, 
				" invalid status specified for $mac ",
				$args->{"status:$mac"});
			print "Bad 'Status' setting. Skipping <code>$mac</code>.<BR>\n";
			next; # skip this one
		}

		if ($args->{"uqlinkup:$mac"} =~ /^(yes|no)$/i) {
			push @params, $args->{"uqlinkup:$mac"};
		} else {
			LA("ERROR", 
				$m->session->{'username'},
				" invalid uqlinkup specified for $mac " .
				$args->{"uqlinkup:$mac"});
			print "Bad 'Unquar When?' setting. Skipping <code>$mac</code>.<BR>\n";
			next; # skip this one
		}

                push(@params, $mac);


		LA("DEBUG", $m->session->{'username'}." is changing $mac - ".
			 join(',', @params));

		if ($args->{"message:$mac"} ne $args->{"messageOrig:$mac"}) {
			$np->db->audit(-mac => $mac, -ip => $args->{'ip'}, 
				-user => $m->session->{'username'},
			      	-msg => [ "QC: message changed to", $args->{"message:$mac"},
					  "from", $args->{"messageOrig:$mac"} ]);
		}

		if ($args->{"status:$mac"} ne $args->{"statusOrig:$mac"}) {
			$np->db->audit(-mac => $mac, -ip => $args->{'ip'}, 
				-user => $m->session->{'username'},
			      	-msg => [ "QC: status changed to", $args->{"status:$mac"},
					  "from",  $args->{"statusOrig:$mac"} ]);
		}


		
		#print "sql=", $sql, "<P>";
		#print "params=", join(", ", @params), "<P>";

		# if quarantine status has changed, then we need to instruct
		# the portmover to reset their port. if only the message is changed,
		# portmover doesnt need to know.

		# 1. is the IP active?
		# 2. does the mac match?
		# 3. what sw/po is it on?
		# 4. reset that port.


		$rv = $sth->execute(@params);

		if($rv) {
			$rv = "";
			my $ipAddr = $args->{"ipAddr:$mac"};
			print qq{<P class='error'>Database update succeeded for mac address "$mac" ($ipAddr)</P>};
			_log("DEBUG", "$mac $ipAddr record updated.\n");

			my ($sw, $po, $m2p, $p2m) = $np->findOurSwitchPort($mac, $ipAddr);

			if (!defined($sw) || !defined($po)) {
				$rv = "not found on network. Port reset failed.";

				_log("DEBUG", "$mac $ipAddr $rv\n");
				$np->db->audit(-mac => $mac, -ip => $args->{'ip'}, 
					-user => $m->session->{'username'},
			      		-msg => [ "QC: $rv " ]);

				$rv = qq{MAC address "$mac" $rv};
			} else {
				_log("DEBUG", "$mac $ipAddr found. quarantining $sw $po\n");
				if (! $np->db->requestMovePort(-switch => $sw, 
						-port => $po, -vlan => 'quarantine',
						-by => 'qc.mhtml')) {

					$rv = "$mac requestMovePort($sw, $po) failed\n";
					_log("ERROR", "$rv\n");

					$np->db->audit(-mac => $mac, -ip => $args->{'ip'}, 
						-user => $m->session->{'username'},
			      			-msg => [ "QC: $rv " ]);
				}

			}
		} else {
			$rv = "$mac failed to update database: ".$sth->errstr;
			_log("ERROR", "$rv\n");
			$np->db->audit(-mac => $mac, -ip => $args->{'ip'}, 
					-user => $m->session->{'username'},
		      			-msg => [ "QC: $rv " ]);
		}


		if ($resultsRV) {
			my $ipAddr = $args->{"ipAddr:$mac"};
			_log("ERROR", "$mac $ipAddr failed to addResult: $resultsRV\n");
			push @rv, "$mac failed to update database: $resultsRV";
		}

		# if any of the above failed, clean up and return a message
		# if nothing failed, we move on to the next mac address.

		if ($rv ne "") {
			$sth->finish;
			push @rv, $rv;
		}
        }

	$sth->finish;

	return join("<BR>", @rv);
}


</%perl>

<HR>

<h2>Definitions</h2>

<ul> 
<li> Quarantine Status </li> <BR>
<dl> <dt>QUAR</dt><dd>Quarantined</dd>
     <dt>PQUAR</dt><dd>Permanently Quarantined</dd>
     <dt>UNQUAR</dt><dd>Unquarantined</dd>
     <dt>PUNQUAR</dt><dd>Permanently Unquarantined</dd>
</dl>
<li> Unquar When? </li><BR>
<dl> <dt>Link Up</dt><dd>As soon as we see link come up on the client's port, validate them and
unquarantine the port assuming the client passes validation checks. In order for this 
setting to take effect, <code>UNQUAR_ON_LINKUP</code> must be set to <code>ITDEPENDS</code>
in <a href="gencfg.mhtml"><code>netpass.conf</code></a>. Validation checks are: 
all of the clients on the port must be tagged as "Link Up"
<I>and</I> they all must be registered and P/UNQUAR. If any client fails to match that, the port will not be
unquarantined.</dd>
     <dt>Web Visit</dt><dd>At least one client on this port must visit the NetPass web site
      before the port will be unquarantined.</dd>
</dl>
</ul>


<h2>Expected Behaviour</h2>

<ul>
<li> When setting a machine to UNQUAR or PUNQUAR:
<ul>
The port is set back to quarantined (yes, that's not a typo) 
within 10 seconds of clicking 'save changes'. You should clear any 'pending' results by setting them to 'fixed'.
When they go to the website, it detects that they are unquarantined, changes their port 
and sends them to the success page. If you forget to clear pending results, they will
be sent to the remediation page. <P>
</Ul> 

<li> When setting a machine to QUAR or PQUAR:
<ul>
The port is changed to quarantined within 10 seconds of clicking 'save changes'. 
If you add a result, they are given that message when they access the web. 
Otherwise, if no results are pending, they are scanned.<P>
When using PQUAR be sure to add at least one result, otherwise the client won't know why they are
permenantly quarantined. QUAR does not require any results to be pending.
<P>
</ul>

</ul>




Making changes to a record results in an <a href="/Admin/audit.mhtml">audit log</a> entry.
