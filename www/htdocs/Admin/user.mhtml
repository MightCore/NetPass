
<%doc>
# $Header: /tmp/netpass/NetPass/www/htdocs/Admin/user.mhtml,v 1.22 2005/05/04 03:09:45 jeffmurphy Exp $

#   (c) 2004 University at Buffalo.
#   Available under the "Artistic License"
#   http://www.gnu.org/licenses/license-list.html#ArtisticLicense


functions:
	1) add a user
	2) delete a user
	3) change user's groups
</%doc>

<%args>
	$submit  => undef;
	$aclHash => undef;
</%args>

<script><!--
setWhereAmI('User Editor');
--></script>

<%perl>
use Data::Dumper;
my $D = 0; # DEBUG ON/OFF

# there is no RO access to this form.

my @rwACLs = ('Admin', 'UserEditor');

my ($isReadWrite, $rwGroups) = $m->comp('/Admin/MemberOf', 'acl' => [ @rwACLs ]);
my ($isRoot, $junk) = $m->comp('/Admin/MemberOf', 'acl' => [ 'Admin' ], 'group' => 'default');

if (!$isRoot && !$isReadWrite) {
        print $q->p({-class=>'error'},
                "Sorry, you don't have access to this form.");
        return;
}

# these are reserved group names.

my %groups = ( 'Admin' => 1, 'ScanAdmin' => 1, 'Editor' => 1, 'Reports' => 1,
		'UserEditor' => 1, 'QuarAdmin' => 1 ); #, 'NetAdmin' => 1 );
my @groups = (keys %groups);
my $error  = "";
my $whoami = $m->session->{'username'};
my $myip   = $ENV{'REMOTE_ADDR'};
my $ldap   = $np->cfg->policy(-key => 'LDAP_USER_QUERY', -network => $ENV{'REMOTE_ADDR'});

# if this is set, "default->Admin" users can change other users' passwords

my $usingAuthDB = $np->cfg->policy(-key => 'ADMIN_AUTH_METHOD', -network => $ENV{'REMOTE_ADDR'}) eq "NetPass::Auth::DB";

# get a list of all networks

my $allNetworks = $np->cfg->getNetworks();

# and all netgroups

my $allNetgroups = ();
foreach my $nw (@$allNetworks) {
	my $ng = $np->cfg->getNetgroup($nw);
	push @$allNetgroups, $ng if ($ng ne "");
}

my $users  = $np->db->getUsersAndGroups();

my %groupsList;
my $gl;
my $user;

# come up with a uniq list of groups to present

foreach $user (sort keys %$users) {
	foreach my $nw (sort keys %{$users->{$user}}) {
		next if exists $groups{$nw};
		$groupsList{$nw} = 1;
	}
}

foreach my $nw (sort @$allNetworks, @$allNetgroups) {
	$groupsList{$nw} = 1;
}

if ($submit eq "Commit Changes") { 
	#print "submit: ".$aclHash."<P>";
	my $uh = {};
	foreach my $part (split (';', $aclHash)) {
		if ($part ne "") {
			my @ap = split(/\$/, $part);
			#print "ap $#ap<P>";
			if ($#ap == 3) {
				if (ref($uh->{$ap[1]}->{$ap[2]}) eq "ARRAY") {
					push @{$uh->{$ap[1]}->{$ap[2]}}, $ap[3];
				} else {
					$uh->{$ap[1]}->{$ap[2]} = [ $ap[3] ];
				}
			}
			elsif ($#ap == 2) {
				# user, group, but no ACL
				$uh->{$ap[1]}->{$ap[2]} = [];
			}
			elsif ($#ap == 1) {
				# user, no groups, no ACL (delete user)
				$uh->{$ap[1]} = {};
			}
		}
	}

	# at this point we have all the edits, but we want to ensure that
	# an admin for one group cant edit a user's ACL for another group.
	# we dont trust what is posted back to us, so we do the check here
	# rather than in the javascript code. 
	#	
	# to accomplish this we make two passes. one for the database 
	# list of users and one for the list of users submitted via
	# the web. the first pass adds any users/groups you are not allowed
	# to edit back into the "uh". the second pass removes any
	# invalid _new_ users/groups you added from the "uh".

	# we extract all users/groups and iterate over
	# them:
	#   1. for any user/group that you _do not_ have permissions for,
	#      we add it back into the userhash if it exists in the db
	#   2. if it does not exist in the db, we delete it from the
	#      hash.
	#
	# we then repeat using the "uh" to remove new, but invalid, users.

	# finally, default:Admin can edit anything. 
	# anythingelse:Admin can edit anything within "anythingelse"
	# anythingelse:UserEditor can edit anything within "anythingelse"
	#    _except_ anythingelse:Admin

	# this lets you delegate user account maintenance to someone else
	# but prevent that person from creating an admin account which would
	# grant them access to network settings, etc.

	if (!$isRoot) {
		my $mygrpRE = '^('.join('|', @$rwGroups).')$';

		print "<PRE>mygrpRE = $mygrpRE\n" if $D;

		print  Data::Dumper->Dump([$uh], [qw(fromweb)] ), "\n" if $D;

		foreach $user (keys %$uh) {
			print "PASS1($user): examine group membership from webdata..\n" if $D;
			foreach my $bdgrp (keys %{$uh->{$user}}) {
				print "\texamining group $bdgrp ..\n";
				if ($bdgrp !~ /$mygrpRE/) {
					print "\t\twe found a group $bdgrp that we arent allowed to edit\n" if $D;

					# we found a group that you added (or possibly changed)
					# via the web but you arent allowed to add. if the group
					# already exists for $user in the database, then restore
					# the database data to "uh" just to be safe. if the group
					# does not exist for the user in the database, then delete
					# it from "uh".

					if (exists ($users->{$user}->{$bdgrp})) {
						print "\t\t\trestoring perms from db copy\n" if $D;
						$uh->{$user}->{$bdgrp} = $users->{$user}->{$bdgrp};
					} else {
						print "\t\t\tdeleting perms\n" if $D;
						delete $uh->{$user}->{$bdgrp};
					}
				} else {
					print "\t\twe found a group $bdgrp you _are_ allowed to edit\n" if $D;
					if (grep !/^Admin$/, @$rwGroups) {
						print "\t\t\tbut you are not Admin\n" if $D;
						print "\t\t\tdb says: $user/$bdgrp = ".join(',', @{$users->{$user}->{$bdgrp}})."\n" if $D && ref($users->{$user}->{$bdgrp}) eq "ARRAY";
						print "\t\t\tuh says: $user/$bdgrp = ".join(',', @{$uh->{$user}->{$bdgrp}})."\n" if $D;
						if ( (grep /^Admin$/, @{$uh->{$user}->{$bdgrp}}) && 
						     ( (ref($users->{$user}->{$bdgrp}) ne "ARRAY") || (grep !/^Admin$/, @{$users->{$user}->{$bdgrp}}) ) ) {
							print "\t\t\t\tand you tried to give $user Admin so we'll remove it\n" if $D;
							@{$uh->{$user}->{$bdgrp}} = grep !/^Admin$/, @{$uh->{$user}->{$bdgrp}};
						}
						elsif ( (grep !/^Admin$/, @{$uh->{$user}->{$bdgrp}}) && (grep /^Admin$/, @{$users->{$user}->{$bdgrp}}) ) {
							print "\t\t\t\tand you tried to take away $user Admin so we'll add it back in\n" if $D;
							@{$uh->{$user}->{$bdgrp}} = ('Admin', @{$uh->{$user}->{$bdgrp}});
						}
						else {
							print "\t\t\t\tand you didnt try to fiddle with Admin so we're OK\n" if $D;
						}
					}
				}
			}
			print "PASS2($user): adding missing data from db back in..\n" if $D;
			foreach my $bdgrp (keys %{$users->{$user}}) {
				print "\texamining group $bdgrp ..\n" if $D;
				if ($bdgrp !~ /$mygrpRE/) {
					print "\t\twe found a group $bdgrp that we arent allowed to edit\n" if $D;
					# we found a group that you deleted via the web
					# but you werent allowed to delete
					if (exists ($users->{$user}->{$bdgrp})) {
						print "\t\t\trestoring perms from db copy\n" if $D;
						$uh->{$user}->{$bdgrp} = $users->{$user}->{$bdgrp};
					} else {
						print "\t\t\tdeleting perms\n" if $D;
						delete $uh->{$user}->{$bdgrp};
					}
				} else {
					print "\t\twe found a group $bdgrp you _are_ allowed to edit\n" if $D;
					if (grep !/^Admin$/, @$rwGroups) {
						print "\t\t\tbut you are not Admin\n" if $D;
						if ( (grep /^Admin$/, @{$uh->{$user}->{$bdgrp}}) && 
						     ( (ref($users->{$user}->{$bdgrp}) ne "ARRAY") || (grep !/^Admin$/, @{$users->{$user}->{$bdgrp}}) ) ) {
							print "\t\t\t\tand you tried to give $user Admin so we'll remove it\n" if $D;
							@{$uh->{$user}->{$bdgrp}} = grep !/^Admin$/, @{$uh->{$user}->{$bdgrp}};
						}
						elsif ( (grep !/^Admin$/, @{$uh->{$user}->{$bdgrp}}) && (grep /^Admin$/, @{$users->{$user}->{$bdgrp}}) ) {
							print "\t\t\t\tand you tried to take away $user Admin so we'll add it back in\n" if $D;
							@{$uh->{$user}->{$bdgrp}} = ('Admin', @{$uh->{$user}->{$bdgrp}});
						}
						else {
							print "\t\t\t\tand you didnt try to fiddle with Admin so we're OK\n" if $D;
						}
					}
				}
			}
		}

		print  Data::Dumper->Dump([$users], [qw(fromdb)] ), "\n" if $D;
		print  Data::Dumper->Dump([$uh], [qw(final)] ), "\n" if $D;

		print "</PRE>" if $D;
	}

	
	$np->db->setUsersAndGroups(-userhash => $uh, -whoami => $m->session->{'username'},
					-ip => $ENV{'REMOTE_ADDR'});

	# because some of the above might have altered this hash, we reload it from the
	# db.

	$users  = $np->db->getUsersAndGroups();
}


</%perl>

<script src="/resources/js/userform.js" type="text/javascript"></script>
<script src="/resources/js/common.js" type="text/javascript"></script>
<script language="JavaScript">
DBG_init();
var whoami = "<%$whoami%>";
var usingAuthDB = <%$usingAuthDB%>;
var userhash = {
<%perl>
	my ($comma1, $comma2, $comma3) = ("", "", "");
	foreach my $user (sort keys %$users) {
		print "$comma1\n\t'$user' : {\n";
		$comma2 = "";
		foreach my $group (sort keys %{$users->{$user}}) {
			print "$comma2\n\t\t'$group' : ";
			if (ref($users->{$user}->{$group}) ne "ARRAY") {
				print "1";
				$comma2 = ",";
			} else {
				print "{\n";
				$comma3 = "";
				#for(my $i = 0 ; $i < $#{$users->{$user}->{$group}} ; $i++) {
				foreach my $acl (sort @{$users->{$user}->{$group}}) {
					print "$comma3\n\t\t\t'$acl' : 1";
					$comma3 = ",";
				}

				print "\t\t}";
				$comma2 = ",";
			}
		}
		print "\t}";
		$comma1 = ",";
	}
</%perl>
};
</script>

<form method="post">

<table>
<tr><td colspan=2>
<%perl>
	if( defined($users) ) {
		my $widthHolder = "-" x 32;
</%perl>

To delete a user, remove them from all groups. All users and groups are shown (and
in Internet Explorer they are editable too), however, you are only allowed to make
changes to the following groups: <P><UL>
<%perl>
	if ($isRoot) { 
		print "<LI> You have full Admin rights: you may edit the ACL for any group.\n";
	} else {
		print "<LI>", join("<LI>", @$rwGroups);
	}
</%perl>
</UL>

This will be enforced when you commit the changes.<P>

<table id='userEditor'>
<tr><th>User</th><th>Groups</th><th>Access Type</th></tr>
<tr><td style='vertical-align:top;'>
	    <select size="33" id="UserList" name="UserList" 
		onchange="userform_changeToUser(this); return false;">
			<option disabled name='width'><%$widthHolder%>
%			foreach $user (sort keys %$users) {
			<option value="<%$user%>"> <%$user%>
%			}
    </select>
    <P><center><input id='addUser' 
		onfocus='userform_onfocus_addUser(this); return false;'
		onblur='userform_onblur_addUser(this); return false;'
	        size=10 maxlength=16 value="Add user..."><BR>
           <I>Press TAB after entering username</I>
	   </center> 

%	# change a user's password (if you are default:admin)
%	if ($isRoot && $usingAuthDB) {
		<a id="passwdDialog" style="display:none;" href="javascript:document.location='chpwd.mhtml?username=' + userform_lookupSelectedUser();">Change Password</a>
%	}
    </td>
    <td style='vertical-align:top;'>
	    <select multiple size="15" id="GroupList" name="GroupList" multiple
		onchange="userform_showACLforGroup(); return false;">
		<option disabled name='width'><%$widthHolder%>
	    </select>
	    <BR><center><button onClick="userform_addGroupToUser(); return false;">^</button> 
		        <button onClick="userform_remGroupFromUser(); return false;">v</button><BR>
			Available Groups:
		</center>

	    <select multiple size="15" id="AvailableGroupList" name="AvailableGroupList" multiple
		onchange="userform_onchange_availableGroups(); return false;">
		<option disabled name='width'><%$widthHolder%>
<%perl>
		foreach my $gl (sort keys %groupsList) {
			print qq{<option value="$gl"> $gl\n};
		}
</%perl>
</select><P><center>
<input type='submit' value='Commit Changes' name='submit'></center><P>


</td>
<td style='vertical-align:top;'>
<select multiple size="33" id="AccessControlList" name="AccessControlList" multiple
 onchange="userform_editACL(); return false;">
<option disabled name='width'><%$widthHolder%>
%		foreach $gl (sort @groups) {
	<option value="<%$gl%>"> <%$gl%>
%		}
</select>
<P><CENTER>
<!-- not implemented -->
<button style='display:none;' id='addToAll' disabled>Add To All</button><P>
<button style='display:none;' id='remFromAll' disabled>Remove From All</button>

</CENTER>
</td></tr></table>

<textarea style="display: NONE;" name="aclHash" id="aclHash" cols=80 rows=24></textarea>
%	}

<script>
	userform_setAclHash();	
	userform_unHighLight("AccessControlList");
	userform_disableList("AccessControlList");
</script>

<HR>

If your group is 'default' then you have the specified permissions
for <I>all</I> groups (default permissions cascade). Otherwise, 
For the specified groups:

<dl>
 <dt> Admin </dt>
 <dd> Full access to all functions and pages. </dd>
 
 <dt> ScanAdmin </dt>
 <dd> Read/write access to the Scan (Nessus) configuration page and the
      IDS (Snort) configuration page. </dd>

 <dt> Editor </dt>
 <dd> Read/write access to the Message Editor page. </dd>

 <dt> Reports </dt>
 <dd> Read only access to:
     <ul>
 	<li> Message Editor </li>
	<li> ScanAdmin </li>
	<li> Audit Logs </li>
	<li> Statistics </li>
     </ul></dd>

 <dt> User </dt>
 <dd> Read/write access to the User page (this page) with the exception
      that you can not change or add Admin users. Only another Admin
      user can change/add an Admin user. </dd>

 <dt> QuarAdmin </dt>
 <dd> Read/write access to the Quarantine Control page. </dd>
</dl>
</form>
