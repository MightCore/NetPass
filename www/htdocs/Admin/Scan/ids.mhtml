
<%doc>
# $Header: /tmp/netpass/NetPass/www/htdocs/Admin/Scan/ids.mhtml,v 1.2 2005/04/19 04:31:04 mtbell Exp $

#   (c) 2004 University at Buffalo.
#   Available under the "Artistic License"
#   http://www.gnu.org/licenses/license-list.html#ArtisticLicense
</%doc>

<%args>
$raw	     => '';
$sid	     => '';
$alloptions  => '';
$ruledel     => '';
$rulesave    => '';
$rule	     => '';
</%args>

<script><!--
setWhereAmI('IDS Config');
--></script>

<script language="Javascript">
	function remOption() {
		var i
		var opt      = document.form.option
		var param    = document.form.optparam
		var index    = opt.selectedIndex
		var str      = opt[index].text

		var vals     = str.split(":")

		for (i = 0; i < param.options.length; i++) {
			if (param[i].text == vals[0]) {
				break
			}
		}

		if (i >= param.options.length) {
			alert("Unknown snort option "+vals[0]);
			return
		}

		opt[index] = null

		param.selectedIndex        = i	
		document.form.optarg.value = vals[1]
	}

	function addOption() {
		var arg	   = document.form.optarg.value
		var param  = document.form.optparam.value
		var option = document.form.option

		if (arg == "") {
			alert("Undefined Argument")
			return false
		}

		var str = param+":"+arg

		var opt = new Option(str, str)
		option.options[option.options.length] = opt
	}

	function prepareOption() {
		var opt      = document.form.option
		var str	     = "("

		for (i = 0; i < opt.options.length; i++) {
			str += opt[i].text + "; "
		}
		str += ")"

		document.form.alloptions.value = str
		return true
	}

</script>


<%perl>


my @reqGroups = ('Admin', 'ScanAdmin', 'Reports');
my $readOnly  = $m->comp('/Admin/MemberOf', 'group' => 'Reports') ? "disabled" : "";
my @table;
my @otable;

my @snortoptions = (
			'ack','classtype','content','flags','flow','msg','seq',
			'reference','rev','sid','uricontent'
		   );

#if (! $m->comp('/Admin/MemberOf', 'group' => [ @reqGroups ]) ) {
#
#        print $q->p({-class=>'error'},
#                "Sorry, permission denied.<BR>You must be in one of these groups: ",
#                join(',', @reqGroups));
#        return;
#}

if ($ruledel eq "Delete") {
	if (!$sid || !deleteRule($dbh, $sid)) {
		print $q->p({-class=>'error'},
		 	"Unable to delete SnortID $sid");
		return;
	}
} elsif ($rulesave eq "Save") {
	if ($raw) {
		addRawRule($dbh, $rule, $sid);
	}
	

}

print $q->h2("IDS Configuration");

print $q->start_form(-method=>"POST", -name=>"form",  action => "ids.mhtml");

print "all options = $alloptions";
push @table, $q->TR( $q->th({-colspan=>9}, "Edit IDS Rules"));
push @table, $q->TR(
			$q->td({-class=>"gray", -align=>"center", -colspan=>1}, "Snort ID") .
			$q->td({-class=>"gray", -align=>"center", -colspan=>8}, "Rule"));

push @table,
	$q->TR(
		$q->td({-class=>"gray", -align=>"center", -colspan=>1, -rowspan=>4, -width=>"15%"},
			$q->textfield(
					-name		=> 'newsid',
					-style		=> "width:80%"

			).$q->br().	
			$q->scrolling_list(
					    -name	=> 'sid',	
					    -values	=> getSids($dbh),
					    -size	=> 6,
					    -default	=> $sid,
					    -style	=> "width:80%;",
					    -onchange	=> "submit();"
					  ).
			$q->td({-class=>"gray", -colspan=>1, -align=>"center"},
				'Action').
			$q->td({-class=>"gray", -colspan=>1, -align=>"center"},
				'Proto').
			$q->td({-class=>"gray", -colspan=>1, -align=>"center"},
				'Src IP').
			$q->td({-class=>"gray", -colspan=>1, -align=>"center"},
				'Src Port').
       		        $q->td({-class=>"gray", -colspan=>1, -align=>"center"},
       		                '<->').
       		        $q->td({-class=>"gray", -colspan=>1, -align=>"center"},
       		                'Dst IP').
       		        $q->td({-class=>"gray", -colspan=>1, -align=>"center"},
       		                'Dst Port').
       		        $q->td({-class=>"gray", -colspan=>1, -align=>"center"},
       		                'Options')
		)
	);

if (!$raw) {
	my $r = getRule($dbh, $sid);
	push @table, 
	$q->TR(
		$q->td({-class=>"gray", -align=>"center", -colspan=>1},
		$q->popup_menu(
				-name	 => 'action',
				-values	 => ['alert', 'pass', 'log'],
				-default => (exists $r->{action}) ? $r->{action} : ""
			      )
		).
		$q->td({-class=>"gray", -align=>"center", -colspan=>1},
		$q->popup_menu(
				-name	=> 'proto',
				-values	=> ['tcp','udp','icmp'],
				-default => (exists $r->{proto}) ? $r->{proto} : ""
			      )
		).
		$q->td({-class=>"gray", -align=>"center", -colspan=>1},
			$q->textfield(
					-name		=> 'srcip',
					-size		=> 15,
					-maxlength	=> 255,
					-value		=> (exists $r->{srcip}) ? $r->{srcip} : "" 
			)
		).
		$q->td({-class=>"gray", -align=>"center", -colspan=>1},
			$q->textfield(
                                        -name           => 'srcport',
                                        -size           => 5,
                                        -maxlength      => 255,
					-value		=> (exists $r->{srcport}) ? $r->{srcport} : "" 
			)
		).
                $q->td({-class=>"gray", -align=>"center", -colspan=>1},
                	$q->popup_menu(
                                -name    => 'dir',
                                -values  => ['->', '<-', '<->'],
				-default => (exists $r->{dir}) ? $r->{dir} : ""
                        )
                ).
                $q->td({-class=>"gray", -align=>"center", -colspan=>1},
                        $q->textfield(
                                        -name           => 'dstip',
                                        -size           => 15,
                                        -maxlength      => 255,
					-value		=> (exists $r->{dstip}) ? $r->{dstip} : "" 
                        )
                ).
                $q->td({-class=>"gray", -align=>"center", -colspan=>1},
                        $q->textfield(
                                        -name           => 'dstport',
                                        -size           => 5,
                                        -maxlength      => 255,
					-value		=> (exists $r->{dstport}) ? $r->{dstport} : "" 
                        )
                ).
		$q->td({-class=>"gray", -align=>"center", -colspan=>1},
			$q->a({-href=>'#', -onclick=> 'showHideObj("options", this);'}, "[ view ]")
		)
	);

	my $opt =  $r->{options};
	$opt	=~ s/[()]//g;

	push @otable,
       		 $q->TR(
	                $q->th({-colspan=>4},
       		         "Options for Snort Rule #$sid"
       		         )
      		  ).
       		 $q->TR(
       		         $q->td({-class=>"gray", -align=>"center", -colspan=>1, -rowspan=>3, -width=>"50%"},
       		                 $q->scrolling_list(
       		                                     -name       => 'option',
       		                                     -values     => [split(/\;/, $opt)],
       		                                     -size       => 6,
       		                                     -style      => "width:95%;",
       		                                   )
       		         ).
			 $q->td({-class=>"gray", -align=>"center", -colspan=>1, -rowspan=>3, -width=>"10%"},
                         	$q->button(
                               		          -name    => 'right',
                               		          -value   => '>',
						  -onclick => "remOption();"
                               	          ).$q->br().
                         	$q->button(
                                         	  -name    => 'left',
                                         	  -value   => '<',
						  -onclick => "addOption();"
                                   	  )
			 ).
			 $q->td({-class=>"gray", -align=>"center", -colspan=>1, -width=>"10%"},
			 "Parameter"
			 ).
			 $q->td({-class=>"gray", -align=>"center", -colspan=>1, -width=>"30%"},
			 "Arguments"
			 )
       		 ).
		$q->TR(
			 $q->td({-class=>"gray", -align=>"center", -colspan=>1, -width=>"20%"},
			 	$q->popup_menu(
                                	        -name   => 'optparam',
                                		-values => \@snortoptions,
                              		      )
			 ).
			 $q->td({-class=>"gray", -align=>"center", -colspan=>1, -width=>"40%"},
				$q->textfield(
						-name	   => 'optarg',
						-size	   => 40,
						-maxlength => 255,
				)
			 )
		).
		$q->TR(
			$q->td({-class=>"gray", -align=>"right", -colspan=>2}, "&nbsp;")
		);


} else {
	push @table,
	$q->TR(
		$q->td({-class=>"gray", -align=>"left", -colspan=>8},
		  	"Snort Rule: (<b><FONT COLOR = red>Warning</FONT></b> Modification of Snort Rules May Result in Discription of IDS Service.)<BR>".
        		$q->textarea(
                               		-name           => 'rule',
                               		-columns        => 80,
					-rows		=> 5,
					-value		=> ($sid > 0) ? (getRule($dbh, $sid))->{rule} : ""
                              	     )
		)
	);

}

push @table,
	$q->TR(
		$q->td({-class=>"gray", -align=>"left", -colspan=>8},
			$q->checkbox(
					-name	  => 'raw',
					-checked  => $raw,
					-value	  => 1,
					-label	  => 'Raw Rule',
					-onclick  => "submit();"
			)
		)
	).
	$q->TR(
		$q->td({-class=>"gray", -align=>"right", -colspan=>8},
			$q->submit(
					-name	  => 'rulesave',
					-value	  => 'Save',
					-onclick  => "return prepareOption();"
				  ).
			$q->submit(
					-name	  => 'ruledel',
					-value	  => 'Delete',
				  )
		)
	);
	

print $q->table({-border=>0, -width=>800}, @table);

if (!$raw) {
	print $q->br();
	print $q->div({-id=>"options", -style=>"DISPLAY:none;"}, 
			$q->table({-border=>0, -width=>800}, @otable)
	     	     );
}

print "<INPUT TYPE=\"hidden\" name=\"alloptions\">";
print $q->end_form();

sub getSids {
        my $dbh     = shift;
	my @sids;

        my $query = "SELECT distinct(snortID) FROM snortRules order by snortID";
        my $sth = $dbh->prepare($query);
        $sth->execute();


        while(my $m = $sth->fetchrow_arrayref) {
                push(@sids, $m->[0]);
        }

        $sth->finish;

        return \@sids;
}

sub getRule {
	my $dbh     = shift;
	my $sid	    = shift;
	my $h	    = {};
	
	my $query = "SELECT rule FROM snortRules WHERE snortID = ? LIMIT 1";
	my $sth = $dbh->prepare($query);
	$sth->execute($sid);

	$h->{rule} = $sth->fetchrow_array();
	$sth->finish;

	my($action, $proto, $sip, $sport, $dir, $dip, $dport, $options) =
		split(/\s+/, $h->{rule}, 8);

	$h->{action}	= $action;
	$h->{proto}	= $proto;
	$h->{srcip}	= $sip;
	$h->{srcport}	= $sport;
	$h->{dir}	= $dir;
	$h->{dstip}	= $dip;
	$h->{dstport}	= $dport;
	$h->{options}	= $options; 
	
	return $h;
}

sub deleteRule {
        my $dbh     = shift;
        my $sid     = shift;

	my $query = "DELETE FROM snortRules WHERE snortID = ?";
	my $sth = $dbh->prepare($query);
	my $rv = $sth->execute($sid);

	$sth->finish;
	return $rv;
}

sub addRawRule {
        my $dbh     = shift;
        my $rule    = shift;
	my $sid	    = shift;

	my $data    = {};

        if ($rule =~ /sid\:(\d+)\;/) {
        	$data->{sid} = $1;
        } else {
		print $q->p({-class=>'error'}, "ERROR Unknown sid in rule definition");
		return 0;
        }

        $data->{rule} = $rule;

        if ($rule =~ /msg\:\"([\w-]+)\s+([^";]+)\"\;/) {
        	$data->{category} = $1;
        	$data->{name}     = $2;
        } else {
		print $q->p({-class=>'error'}, "ERROR Unknown category and name of rule in rule definition");
		return 0;
	}

        if ($rule =~ /rev\:(\d+)\;/) {
        	$data->{rev} = $1;
        } else {
		print $q->p({-class=>'error'}, "ERROR Unknown revision number in rule definition");
		return 0;
	}

        if ($rule =~ /classtype\:([^;]+)\;/) {
        	$data->{classtype} = $1;
        } else {
		print $q->p({-class=>'error'}, "ERROR Unknown classtype in rule definition");
		return 0;
	}

        if ($rule =~ /reference\:([^;]+)\;/) {
        	$data->{reference} = $1;
        }

	my $query = "SELECT revision FROM snortRules WHERE snortID = ?";
	my $sth = $dbh->prepare($query);
	if (!$sth->execute($data->{sid})) {
		print $q->p({-class=>'error'}, "ERROR Unable to check revision number for snortID ".$data->{sid});
		return 0;
	}

	my($rev) = $sth->fetchrow_array();
	$sth->finish;

	if (defined $rev && $rev >= $data->{rev}) {
		print $q->p({-class=>'error'}, "ERROR Revision $rev is greater than rule being submitted with rev #".$data->{rev});
		return 0;
	}

	$data->{desc} = "none";
	my $sql;
	my $username = $m->session->{'username'};

	if (defined $rev) {
		$sql = qq{UPDATE snortRules SET    snortID	= ?,
						   name		= ?,
						   category	= ?,
						   classtype	= ?,
						   description	= ?,
						   rule		= ?,
						   lastModifiedBy = ?,
						   revision	= ?,
						   other_refs	= ? 
						   WHERE snortID = $sid};
	} else {
		$sql = qq{INSERT INTO snortRules (
                                     		   snortID, name, category, classtype,
                                     		   description, rule, addedBy, lastModifiedBy,
                                     		   revision, other_refs
                                  		 ) VALUES (?,?,?,?,?,?,$username,?,?,?)};
	}

	$sth = $dbh->prepare($sql);
	my $rv = $sth->execute(
				$data->{sid},
				$data->{name},
				$data->{category},
				$data->{classtype},
                            	$data->{desc},
                            	$data->{rule},
				$username,
                            	$data->{rev},
                            	$data->{reference}
			      );

print "error = ".$dbh->errstr;
	$sth->finish;
	if (!$rv) {
		print $q->p({-class=>'error'}, "ERROR Unable to insert rule into database");
		return 0;
	}
	return 1;
}

</%perl>

